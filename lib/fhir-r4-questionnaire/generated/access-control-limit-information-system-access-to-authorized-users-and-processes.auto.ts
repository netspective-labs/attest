import * as rt from "../r4q-runtime.ts";
/**
 * @file access-control-limit-information-system-access-to-authorized-users-and-processes.auto.ts
 * @generated This file was auto-generated from the FHIR R4 Questionnaire "Access Control Limit Information System Access To Authorized Users And Processes".
 * Do not edit this file manually; re-run the generator if the source Questionnaire changes.
 * Profiles: http://hl7.org/fhir/4.0/StructureDefinition/Questionnaire
 *
 * Normalizes LHC JSON and FHIR QuestionnaireResponse into the type-safe `AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses` interface.
 */

// this is the module signature, used by importers to identify the module
// using r4q-runtime.ts `moduleSignature` function
export const accessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesModuleSignature:
  rt.ModuleSignature = {
    title:
      "Access Control Limit Information System Access To Authorized Users And Processes",
    filename:
      "access-control-limit-information-system-access-to-authorized-users-and-processes.auto.ts",
    titleCamel:
      "`accessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses`",
    titlePascal:
      "`AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses`",
    titleKebab:
      "`access-control-limit-information-system-access-to-authorized-users-and-processes`",
    lhcFormResponseAdapterFnName:
      "accessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesLhcFormResponseAdapter",
    fhirQuestionnaireResponseAdapterFnName:
      "accessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesFhirQuestionnaireResponseAdapter",
    sourceTextConstName:
      "accessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesSource",
  };

// deno-lint-ignore no-explicit-any
type Any = any;
/**
 * Form Help (from display/help controls):
 * - This control makes sure only the right people, the allowed tools and services they use, and approved company devices should be able to get into your systems.
 */
/** Map of normalized property names to their source `linkId`. */
export const accessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesLinkIds =
  {
    accessControlPolicyExists: "744146359806",
    accessControlPolicyElementsItems: "669545773690",
    accessControlPolicyElementsItemsNotes: "687383539343",
    accessControlCurrentAccounts: "182548770364",
    accessControlCountActiveAccounts: "927965645729",
    accessControlCountInactiveAccounts: "903940962912",
    accessControlCountServiceAccounts: "338820008158",
    accessControlCountSharedAccounts: "673437974050",
    accessControlLeastPrivilegeStatus: "368418823104",
    accessControlLeastPrivilegeStatusNotes: "650863308787",
    accessControlAccountLifecycleProcess: "341135397442",
    accessControlAccountLifecycleProcessNotes: "700016005983",
    accessControlAccountReviewFrequencyQuestion: "563546854643",
    accessControlAccountReviewFrequencyNotes: "469989997039",
    accessControlLeastPrivilegeTransactionStatus: "316234331937",
    accessControlLeastPrivilegeTransactionStatusNotes: "983575859757",
    accessControlLimitEmployeeActions: "589002798804",
    accessControlLimitEmployeeActionsNotes: "635610218995",
    accessControlRoleLimitedActions: "525896610609",
    accessControlRoleLimitedActionsNotes: "524794183862",
    accessControlSensitiveActionApprovalProcess: "859148329958",
    accessControlSensitiveActionApprovalNotes: "988634546235",
    accessControlExternalConnectionsStatus: "358071855489",
    accessControlExternalConnectionsStatusNotes: "108304278260",
    accessControlExternalSystemTypes: "261758300502",
    accessControlExternalSystemTypesNotes: "681710464598",
    accessControlExternalSystemSafetyCheck: "495111707033",
    accessControlExternalSystemSafetyCheckNotes: "895273053564",
    accessControlConnectionLimitationsList: "597499672942",
    accessControlConnectionLimitationsNotes: "197339830339",
    accessControlPublicInfoProcessStatus: "260717222110",
    accessControlPublicInfoProcessStatusNotes: "813842964343",
    accessControlPublicSystemsList: "660159010455",
    accessControlPublicSystemsListNotes: "252003749158",
    accessControlFciPostingPreventionProcess: "229261839700",
    accessControlFciPostingPreventionNotes: "633971923340",
    accessControlAuthorizedPublicSystems: "624223914711",
    accessControlAuthorizedPersonnelCount: "374839487767",
    accessControlAuthorizedPersonnelDepts: "177243885107",
    accessControlAuthorizedPersonnelNotes: "163760226494",
  } as const;

/** Normalized view of "Access Control Limit Information System Access To Authorized Users And Processes" answers. */
export interface AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses {
  /**
   * Do you have an Access Control Policy?
   * linkId: 744146359806
   * FHIR type: choice
   * Section: AC.L1-B.1.I - Authorized Access Control
   * Options: "Yes", " No"
   * Required: no
   */
  accessControlPolicyExists?: "Yes" | " No";

  /**
   * Does your documented access control policy address these items?
   * linkId: 669545773690
   * FHIR type: choice
   * Section: AC.L1-B.1.I - Authorized Access Control > Access Control Policy Elements
   * Options: "Purpose, scope, roles, and responsibilities", "Management commitment", "Coordination among organizational entities", "Compliance requirements"
   * Required: no
   */
  accessControlPolicyElementsItems?: (
    | "Purpose, scope, roles, and responsibilities"
    | "Management commitment"
    | "Coordination among organizational entities"
    | "Compliance requirements"
  )[];

  /**
   * Notes / Evidence
   * linkId: 687383539343
   * FHIR type: string
   * Entry format: Enter notes or supporting evidence, if any
   * Section: AC.L1-B.1.I - Authorized Access Control > Access Control Policy Elements
   * Required: no
   */
  accessControlPolicyElementsItemsNotes?: string;

  /**
   * How many accounts are currently in your systems?
   * linkId: 182548770364
   * FHIR type: display
   * Section: AC.L1-B.1.I - Authorized Access Control > User Account Registry
   * Required: no
   */
  accessControlCurrentAccounts?: string;

  /**
   * Active user accounts:
   * linkId: 927965645729
   * FHIR type: integer
   * Section: AC.L1-B.1.I - Authorized Access Control > User Account Registry
   * Required: no
   */
  accessControlCountActiveAccounts?: number;

  /**
   * Inactive/disabled user accounts:
   * linkId: 903940962912
   * FHIR type: integer
   * Section: AC.L1-B.1.I - Authorized Access Control > User Account Registry
   * Required: no
   */
  accessControlCountInactiveAccounts?: number;

  /**
   * Service accounts:
   * linkId: 338820008158
   * FHIR type: integer
   * Section: AC.L1-B.1.I - Authorized Access Control > User Account Registry
   * Required: no
   */
  accessControlCountServiceAccounts?: number;

  /**
   * Shared accounts:
   * linkId: 673437974050
   * FHIR type: integer
   * Section: AC.L1-B.1.I - Authorized Access Control > User Account Registry
   * Required: no
   */
  accessControlCountSharedAccounts?: number;

  /**
   * The ‘least privilege’ rule means staff should have only the level of system access their role requires (and no more). Where in your systems do you apply this rule?
   * linkId: 368418823104
   * FHIR type: choice
   * Section: AC.L1-B.1.I - Authorized Access Control > Principle of Least Privilege Implementation
   * Options: "Fully implemented across all systems", "Partially implemented", "Not implemented"
   * Required: no
   */
  accessControlLeastPrivilegeStatus?:
    | "Fully implemented across all systems"
    | "Partially implemented"
    | "Not implemented";

  /**
   * Notes / Evidence
   * linkId: 650863308787
   * FHIR type: string
   * Entry format: Enter notes or supporting evidence, if any
   * Section: AC.L1-B.1.I - Authorized Access Control > Principle of Least Privilege Implementation
   * Required: no
   */
  accessControlLeastPrivilegeStatusNotes?: string;

  /**
   * How do you add, change, and remove employee access to company systems?
   * linkId: 341135397442
   * FHIR type: choice
   * Section: AC.L1-B.1.I - Authorized Access Control > Account Management Processes
   * Options: "We use an automated system that creates and removes access for us.", "We handle it manually, but require manager approval before access is given.", "Our HR system is connected, so access changes automatically when people join or leave.", "We regularly review who has access and confirm it’s still correct."
   * Required: no
   */
  accessControlAccountLifecycleProcess?: (
    | "We use an automated system that creates and removes access for us."
    | "We handle it manually, but require manager approval before access is given."
    | "Our HR system is connected, so access changes automatically when people join or leave."
    | "We regularly review who has access and confirm it’s still correct."
  )[];

  /**
   * Notes / Evidence
   * linkId: 700016005983
   * FHIR type: string
   * Entry format: Enter notes or supporting evidence, if any
   * Section: AC.L1-B.1.I - Authorized Access Control > Account Management Processes
   * Required: no
   */
  accessControlAccountLifecycleProcessNotes?: string;

  /**
   * How frequently are user accounts reviewed for validity and appropriate access?
   * linkId: 563546854643
   * FHIR type: choice
   * Section: AC.L1-B.1.I - Authorized Access Control > Account Management Processes > Account Review Frequency
   * Options: "Monthly", " Quarterly", "Annually", "Other (specify):"
   * Required: no
   */
  accessControlAccountReviewFrequencyQuestion?:
    | "Monthly"
    | " Quarterly"
    | "Annually"
    | "Other (specify):";

  /**
   * Notes / Evidence
   * linkId: 469989997039
   * FHIR type: string
   * Entry format: Enter notes or supporting evidence, if any
   * Section: AC.L1-B.1.I - Authorized Access Control > Account Management Processes > Account Review Frequency
   * Required: no
   */
  accessControlAccountReviewFrequencyNotes?: string;

  /**
   * What is the status of least privilege implementation (making sure employees only have access to the specific actions their role requires, for example, read vs. edit vs. approve)?
   * linkId: 316234331937
   * FHIR type: choice
   * Section: AC.L1-B.1.II - Transaction & Function Control
   * Options: "Fully implemented – access is role-based and regularly reviewed.", "Partially implemented – some roles limited, others still too broad.", "Not implemented – all users have broad access.", "Not applicable – no sensitive transactions in scope."
   * Required: no
   */
  accessControlLeastPrivilegeTransactionStatus?:
    | "Fully implemented – access is role-based and regularly reviewed."
    | "Partially implemented – some roles limited, others still too broad."
    | "Not implemented – all users have broad access."
    | "Not applicable – no sensitive transactions in scope.";

  /**
   * Notes / Evidence
   * linkId: 983575859757
   * FHIR type: string
   * Entry format: Enter notes or supporting evidence, if any
   * Section: AC.L1-B.1.II - Transaction & Function Control
   * Required: no
   */
  accessControlLeastPrivilegeTransactionStatusNotes?: string;

  /**
   * How do you limit employees to only the system actions their job requires?
   * linkId: 589002798804
   * FHIR type: choice
   * Section: AC.L1-B.1.II - Transaction & Function Control > Transaction Control Implementation
   * Options: "By job role (e.g., managers vs. staff have different access).", "By type of action (e.g., can read data but not edit or delete it).", "By application (e.g., only certain people can use a given tool).", "By time (e.g., access only during work hours).", "By location (e.g., access only from the office or approved networks)."
   * Required: no
   */
  accessControlLimitEmployeeActions?:
    | "By job role (e.g., managers vs. staff have different access)."
    | "By type of action (e.g., can read data but not edit or delete it)."
    | "By application (e.g., only certain people can use a given tool)."
    | "By time (e.g., access only during work hours)."
    | "By location (e.g., access only from the office or approved networks).";

  /**
   * Notes / Evidence
   * linkId: 635610218995
   * FHIR type: string
   * Entry format: Enter notes or supporting evidence, if any
   * Section: AC.L1-B.1.II - Transaction & Function Control > Transaction Control Implementation
   * Required: no
   */
  accessControlLimitEmployeeActionsNotes?: string;

  /**
   * What actions are limited to certain job roles (e.g., only managers can approve, staff can only view)?
   * linkId: 525896610609
   * FHIR type: choice
   * Section: AC.L1-B.1.II - Transaction & Function Control > Function Restrictions by Role
   * Options: "Administrative functions (user management, system configuration)", "Financial transactions and approvals", "Data export and bulk download functions", "Report generation and access", "System-level commands and utilities"
   * Required: no
   */
  accessControlRoleLimitedActions?: (
    | "Administrative functions (user management, system configuration)"
    | "Financial transactions and approvals"
    | "Data export and bulk download functions"
    | "Report generation and access"
    | "System-level commands and utilities"
  )[];

  /**
   * Notes / Evidence
   * linkId: 524794183862
   * FHIR type: string
   * Entry format: Enter notes or supporting evidence, if any
   * Section: AC.L1-B.1.II - Transaction & Function Control > Function Restrictions by Role
   * Required: no
   */
  accessControlRoleLimitedActionsNotes?: string;

  /**
   * How do you make sure sensitive actions (like payments or data changes) get proper approval before they happen?
   * linkId: 859148329958
   * FHIR type: choice
   * Section: AC.L1-B.1.II - Transaction & Function Control > Transaction Authorization Requirements
   * Options: "Manager approval required", "Two-person authorization", "Automated business rules and limits", "No special authorization required"
   * Required: no
   */
  accessControlSensitiveActionApprovalProcess?: (
    | "Manager approval required"
    | "Two-person authorization"
    | "Automated business rules and limits"
    | "No special authorization required"
  )[];

  /**
   * Notes / Evidence
   * linkId: 988634546235
   * FHIR type: string
   * Entry format: Enter notes or supporting evidence, if any
   * Section: AC.L1-B.1.II - Transaction & Function Control > Transaction Authorization Requirements
   * Required: no
   */
  accessControlSensitiveActionApprovalNotes?: string;

  /**
   * What is the status of your controls over outside connections (internet, cloud tools, personal devices)?
   * linkId: 358071855489
   * FHIR type: choice
   * Section: AC.L1-B.1.III - External Connections
   * Options: "Fully implemented – Only approved external systems can connect; all activity is monitored.", "Partially implemented – Some external connections are controlled, but gaps remain.", "Not implemented – Any system or device can connect without restriction.", "Not applicable – No external systems connect to the environment in scope."
   * Required: no
   */
  accessControlExternalConnectionsStatus?:
    | "Fully implemented – Only approved external systems can connect; all activity is monitored."
    | "Partially implemented – Some external connections are controlled, but gaps remain."
    | "Not implemented – Any system or device can connect without restriction."
    | "Not applicable – No external systems connect to the environment in scope.";

  /**
   * Notes / Evidence
   * linkId: 108304278260
   * FHIR type: string
   * Entry format: Enter notes or supporting evidence, if any
   * Section: AC.L1-B.1.III - External Connections
   * Required: no
   */
  accessControlExternalConnectionsStatusNotes?: string;

  /**
   * What kinds of outside systems or devices connect to your company’s network or data? (Think about email, file sharing, partner portals, or employee devices.)
   * linkId: 261758300502
   * FHIR type: choice
   * Section: AC.L1-B.1.III - External Connections >  External System Connections
   * Options: "Cloud services – e.g., Microsoft 365, Google Workspace, Dropbox, Salesforce.", "Business partner networks – e.g., joint project portals, shared databases.", "Vendor/supplier systems – e.g., ERP integrations, supplier ordering platforms.", "Government systems and portals – e.g., DoD contractor portals, SAM.gov, PIEE.", "Personal devices (BYOD) – e.g., employees’ personal laptops, phones, or tablets.", "Remote access systems – e.g., VPN, Citrix, Microsoft RDP.", "No external connections – We keep all systems completely internal."
   * Required: no
   */
  accessControlExternalSystemTypes?: (
    | "Cloud services – e.g., Microsoft 365, Google Workspace, Dropbox, Salesforce."
    | "Business partner networks – e.g., joint project portals, shared databases."
    | "Vendor/supplier systems – e.g., ERP integrations, supplier ordering platforms."
    | "Government systems and portals – e.g., DoD contractor portals, SAM.gov, PIEE."
    | "Personal devices (BYOD) – e.g., employees’ personal laptops, phones, or tablets."
    | "Remote access systems – e.g., VPN, Citrix, Microsoft RDP."
    | "No external connections – We keep all systems completely internal."
  )[];

  /**
   * Notes / Evidence
   * linkId: 681710464598
   * FHIR type: string
   * Entry format: Enter notes or supporting evidence, if any
   * Section: AC.L1-B.1.III - External Connections >  External System Connections
   * Required: no
   */
  accessControlExternalSystemTypesNotes?: string;

  /**
   * How do you check that outside systems and devices are safe before they connect to your network?
   * linkId: 495111707033
   * FHIR type: choice
   * Section: AC.L1-B.1.III - External Connections > Connection Verification Methods
   * Options: "We use digital certificates and PKI to prove identity.", "We require VPN logins with authentication before allowing access.", "We set firewall rules or restrict by IP address so only approved connections get through.", "We use signed agreements with partners/vendors that spell out security requirements.", "We continuously monitor and log external connections to spot suspicious activity."
   * Required: no
   */
  accessControlExternalSystemSafetyCheck?: (
    | "We use digital certificates and PKI to prove identity."
    | "We require VPN logins with authentication before allowing access."
    | "We set firewall rules or restrict by IP address so only approved connections get through."
    | "We use signed agreements with partners/vendors that spell out security requirements."
    | "We continuously monitor and log external connections to spot suspicious activity."
  )[];

  /**
   * Notes / Evidence
   * linkId: 895273053564
   * FHIR type: string
   * Entry format: Enter notes or supporting evidence, if any
   * Section: AC.L1-B.1.III - External Connections > Connection Verification Methods
   * Required: no
   */
  accessControlExternalSystemSafetyCheckNotes?: string;

  /**
   * What limitations are placed on external connections?
   * linkId: 597499672942
   * FHIR type: choice
   * Section: AC.L1-B.1.III - External Connections > Connection Control Limitations
   * Options: "Time-based access restrictions", "Restrictions on data types that can be shared", "Limited to specific user groups", "Management approval required for each connection", "Comprehensive audit trails and logging"
   * Required: no
   */
  accessControlConnectionLimitationsList?: (
    | "Time-based access restrictions"
    | "Restrictions on data types that can be shared"
    | "Limited to specific user groups"
    | "Management approval required for each connection"
    | "Comprehensive audit trails and logging"
  )[];

  /**
   * Notes / Evidence
   * linkId: 197339830339
   * FHIR type: string
   * Entry format: Enter notes or supporting evidence, if any
   * Section: AC.L1-B.1.III - External Connections > Connection Control Limitations
   * Required: no
   */
  accessControlConnectionLimitationsNotes?: string;

  /**
   * What's the status of your process to make sure sensitive contract information (FCI) isn’t accidentally posted on your website, social media, or other public systems?
   * linkId: 260717222110
   * FHIR type: choice
   * Section: AC.L1-B.1.IV - Control Public Information
   * Options: "Fully implemented – We have a written approval process, only authorized staff can post, and we review/remove public content regularly.", "Partially implemented – Some controls are in place (e.g., only certain staff can post), but no formal review or monitoring.", "Not implemented – Anyone can post content publicly without checks, and there is no process for review."
   * Required: no
   */
  accessControlPublicInfoProcessStatus?:
    | "Fully implemented – We have a written approval process, only authorized staff can post, and we review/remove public content regularly."
    | "Partially implemented – Some controls are in place (e.g., only certain staff can post), but no formal review or monitoring."
    | "Not implemented – Anyone can post content publicly without checks, and there is no process for review.";

  /**
   * Notes / Evidence
   * linkId: 813842964343
   * FHIR type: string
   * Entry format: Enter notes or supporting evidence, if any
   * Section: AC.L1-B.1.IV - Control Public Information
   * Required: no
   */
  accessControlPublicInfoProcessStatusNotes?: string;

  /**
   * What publicly accessible systems does your organization operate?
   * linkId: 660159010455
   * FHIR type: choice
   * Section: AC.L1-B.1.IV - Control Public Information > Publicly Accessible Systems
   * Options: "Company website", " Social media accounts", "Customer portals or self-service systems", "Corporate blog or news site", "Public forums or discussion boards", "No publicly accessible systems"
   * Required: no
   */
  accessControlPublicSystemsList?: (
    | "Company website"
    | " Social media accounts"
    | "Customer portals or self-service systems"
    | "Corporate blog or news site"
    | "Public forums or discussion boards"
    | "No publicly accessible systems"
  )[];

  /**
   * Notes / Evidence
   * linkId: 252003749158
   * FHIR type: string
   * Entry format: Enter notes or supporting evidence, if any
   * Section: AC.L1-B.1.IV - Control Public Information > Publicly Accessible Systems
   * Required: no
   */
  accessControlPublicSystemsListNotes?: string;

  /**
   * How do you ensure FCI (Federal Contract Information) is not posted on public systems?
   * linkId: 229261839700
   * FHIR type: choice
   * Section: AC.L1-B.1.IV - Control Public Information > Content Review Process
   * Options: "Pre-publication review and approval process", "Designated reviewers trained to identify FCI", "Automated content scanning for sensitive information", "Periodic audits of published content", "Procedures for rapid removal of inappropriate content"
   * Required: no
   */
  accessControlFciPostingPreventionProcess?: (
    | "Pre-publication review and approval process"
    | "Designated reviewers trained to identify FCI"
    | "Automated content scanning for sensitive information"
    | "Periodic audits of published content"
    | "Procedures for rapid removal of inappropriate content"
  )[];

  /**
   * Notes / Evidence
   * linkId: 633971923340
   * FHIR type: string
   * Entry format: Enter notes or supporting evidence, if any
   * Section: AC.L1-B.1.IV - Control Public Information > Content Review Process
   * Required: no
   */
  accessControlFciPostingPreventionNotes?: string;

  /**
   * Who is authorized to post content to public systems?
   * linkId: 624223914711
   * FHIR type: display
   * Section: AC.L1-B.1.IV - Control Public Information > Authorized Publishing Personnel
   * Required: no
   */
  accessControlAuthorizedPublicSystems?: string;

  /**
   * Number of authorized personnel:
   * linkId: 374839487767
   * FHIR type: integer
   * Section: AC.L1-B.1.IV - Control Public Information > Authorized Publishing Personnel
   * Required: no
   */
  accessControlAuthorizedPersonnelCount?: number;

  /**
   * Choose all that apply:
   * linkId: 177243885107
   * FHIR type: choice
   * Section: AC.L1-B.1.IV - Control Public Information > Authorized Publishing Personnel
   * Options: "Marketing department", "Communications/PR team", "Executive leadership", "IT administrators"
   * Required: no
   */
  accessControlAuthorizedPersonnelDepts?: (
    | "Marketing department"
    | "Communications/PR team"
    | "Executive leadership"
    | "IT administrators"
  )[];

  /**
   * Notes / Evidence
   * linkId: 163760226494
   * FHIR type: string
   * Entry format: Enter notes or supporting evidence, if any
   * Section: AC.L1-B.1.IV - Control Public Information > Authorized Publishing Personnel
   * Required: no
   */
  accessControlAuthorizedPersonnelNotes?: string;
}

/** Convert an LHC JSON response into a normalized AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses object. */
export function accessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesLhcFormResponseAdapter(
  input: Any,
): AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses {
  return {
    accessControlPolicyExists: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "744146359806"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlPolicyExists"
    ],
    accessControlPolicyElementsItems: rt.coerceOptionalStringArray(
      rt.findLhcValueByLinkId(input, "669545773690"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlPolicyElementsItems"
    ],
    accessControlPolicyElementsItemsNotes: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "687383539343"),
    ),
    accessControlCurrentAccounts: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "182548770364"),
    ),
    accessControlCountActiveAccounts: rt.coerceOptionalNumber(
      rt.findLhcValueByLinkId(input, "927965645729"),
    ),
    accessControlCountInactiveAccounts: rt.coerceOptionalNumber(
      rt.findLhcValueByLinkId(input, "903940962912"),
    ),
    accessControlCountServiceAccounts: rt.coerceOptionalNumber(
      rt.findLhcValueByLinkId(input, "338820008158"),
    ),
    accessControlCountSharedAccounts: rt.coerceOptionalNumber(
      rt.findLhcValueByLinkId(input, "673437974050"),
    ),
    accessControlLeastPrivilegeStatus: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "368418823104"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlLeastPrivilegeStatus"
    ],
    accessControlLeastPrivilegeStatusNotes: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "650863308787"),
    ),
    accessControlAccountLifecycleProcess: rt.coerceOptionalStringArray(
      rt.findLhcValueByLinkId(input, "341135397442"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlAccountLifecycleProcess"
    ],
    accessControlAccountLifecycleProcessNotes: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "700016005983"),
    ),
    accessControlAccountReviewFrequencyQuestion: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "563546854643"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlAccountReviewFrequencyQuestion"
    ],
    accessControlAccountReviewFrequencyNotes: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "469989997039"),
    ),
    accessControlLeastPrivilegeTransactionStatus: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "316234331937"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlLeastPrivilegeTransactionStatus"
    ],
    accessControlLeastPrivilegeTransactionStatusNotes: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "983575859757"),
    ),
    accessControlLimitEmployeeActions: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "589002798804"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlLimitEmployeeActions"
    ],
    accessControlLimitEmployeeActionsNotes: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "635610218995"),
    ),
    accessControlRoleLimitedActions: rt.coerceOptionalStringArray(
      rt.findLhcValueByLinkId(input, "525896610609"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlRoleLimitedActions"
    ],
    accessControlRoleLimitedActionsNotes: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "524794183862"),
    ),
    accessControlSensitiveActionApprovalProcess: rt.coerceOptionalStringArray(
      rt.findLhcValueByLinkId(input, "859148329958"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlSensitiveActionApprovalProcess"
    ],
    accessControlSensitiveActionApprovalNotes: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "988634546235"),
    ),
    accessControlExternalConnectionsStatus: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "358071855489"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlExternalConnectionsStatus"
    ],
    accessControlExternalConnectionsStatusNotes: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "108304278260"),
    ),
    accessControlExternalSystemTypes: rt.coerceOptionalStringArray(
      rt.findLhcValueByLinkId(input, "261758300502"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlExternalSystemTypes"
    ],
    accessControlExternalSystemTypesNotes: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "681710464598"),
    ),
    accessControlExternalSystemSafetyCheck: rt.coerceOptionalStringArray(
      rt.findLhcValueByLinkId(input, "495111707033"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlExternalSystemSafetyCheck"
    ],
    accessControlExternalSystemSafetyCheckNotes: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "895273053564"),
    ),
    accessControlConnectionLimitationsList: rt.coerceOptionalStringArray(
      rt.findLhcValueByLinkId(input, "597499672942"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlConnectionLimitationsList"
    ],
    accessControlConnectionLimitationsNotes: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "197339830339"),
    ),
    accessControlPublicInfoProcessStatus: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "260717222110"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlPublicInfoProcessStatus"
    ],
    accessControlPublicInfoProcessStatusNotes: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "813842964343"),
    ),
    accessControlPublicSystemsList: rt.coerceOptionalStringArray(
      rt.findLhcValueByLinkId(input, "660159010455"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlPublicSystemsList"
    ],
    accessControlPublicSystemsListNotes: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "252003749158"),
    ),
    accessControlFciPostingPreventionProcess: rt.coerceOptionalStringArray(
      rt.findLhcValueByLinkId(input, "229261839700"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlFciPostingPreventionProcess"
    ],
    accessControlFciPostingPreventionNotes: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "633971923340"),
    ),
    accessControlAuthorizedPublicSystems: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "624223914711"),
    ),
    accessControlAuthorizedPersonnelCount: rt.coerceOptionalNumber(
      rt.findLhcValueByLinkId(input, "374839487767"),
    ),
    accessControlAuthorizedPersonnelDepts: rt.coerceOptionalStringArray(
      rt.findLhcValueByLinkId(input, "177243885107"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlAuthorizedPersonnelDepts"
    ],
    accessControlAuthorizedPersonnelNotes: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "163760226494"),
    ),
  };
}

/** Convert a FHIR QuestionnaireResponse into a normalized AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses object. */
export function accessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesFhirQuestionnaireResponseAdapter(
  qr: Any,
): AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses {
  return {
    accessControlPolicyExists: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "744146359806"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlPolicyExists"
    ],
    accessControlPolicyElementsItems: rt.coerceOptionalStringArray(
      rt.findQrAnswersByLinkId(qr, "669545773690"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlPolicyElementsItems"
    ],
    accessControlPolicyElementsItemsNotes: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "687383539343"),
    ),
    accessControlCurrentAccounts: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "182548770364"),
    ),
    accessControlCountActiveAccounts: rt.coerceOptionalNumber(
      rt.findQrAnswerByLinkId(qr, "927965645729"),
    ),
    accessControlCountInactiveAccounts: rt.coerceOptionalNumber(
      rt.findQrAnswerByLinkId(qr, "903940962912"),
    ),
    accessControlCountServiceAccounts: rt.coerceOptionalNumber(
      rt.findQrAnswerByLinkId(qr, "338820008158"),
    ),
    accessControlCountSharedAccounts: rt.coerceOptionalNumber(
      rt.findQrAnswerByLinkId(qr, "673437974050"),
    ),
    accessControlLeastPrivilegeStatus: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "368418823104"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlLeastPrivilegeStatus"
    ],
    accessControlLeastPrivilegeStatusNotes: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "650863308787"),
    ),
    accessControlAccountLifecycleProcess: rt.coerceOptionalStringArray(
      rt.findQrAnswersByLinkId(qr, "341135397442"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlAccountLifecycleProcess"
    ],
    accessControlAccountLifecycleProcessNotes: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "700016005983"),
    ),
    accessControlAccountReviewFrequencyQuestion: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "563546854643"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlAccountReviewFrequencyQuestion"
    ],
    accessControlAccountReviewFrequencyNotes: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "469989997039"),
    ),
    accessControlLeastPrivilegeTransactionStatus: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "316234331937"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlLeastPrivilegeTransactionStatus"
    ],
    accessControlLeastPrivilegeTransactionStatusNotes: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "983575859757"),
    ),
    accessControlLimitEmployeeActions: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "589002798804"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlLimitEmployeeActions"
    ],
    accessControlLimitEmployeeActionsNotes: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "635610218995"),
    ),
    accessControlRoleLimitedActions: rt.coerceOptionalStringArray(
      rt.findQrAnswersByLinkId(qr, "525896610609"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlRoleLimitedActions"
    ],
    accessControlRoleLimitedActionsNotes: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "524794183862"),
    ),
    accessControlSensitiveActionApprovalProcess: rt.coerceOptionalStringArray(
      rt.findQrAnswersByLinkId(qr, "859148329958"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlSensitiveActionApprovalProcess"
    ],
    accessControlSensitiveActionApprovalNotes: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "988634546235"),
    ),
    accessControlExternalConnectionsStatus: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "358071855489"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlExternalConnectionsStatus"
    ],
    accessControlExternalConnectionsStatusNotes: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "108304278260"),
    ),
    accessControlExternalSystemTypes: rt.coerceOptionalStringArray(
      rt.findQrAnswersByLinkId(qr, "261758300502"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlExternalSystemTypes"
    ],
    accessControlExternalSystemTypesNotes: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "681710464598"),
    ),
    accessControlExternalSystemSafetyCheck: rt.coerceOptionalStringArray(
      rt.findQrAnswersByLinkId(qr, "495111707033"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlExternalSystemSafetyCheck"
    ],
    accessControlExternalSystemSafetyCheckNotes: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "895273053564"),
    ),
    accessControlConnectionLimitationsList: rt.coerceOptionalStringArray(
      rt.findQrAnswersByLinkId(qr, "597499672942"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlConnectionLimitationsList"
    ],
    accessControlConnectionLimitationsNotes: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "197339830339"),
    ),
    accessControlPublicInfoProcessStatus: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "260717222110"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlPublicInfoProcessStatus"
    ],
    accessControlPublicInfoProcessStatusNotes: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "813842964343"),
    ),
    accessControlPublicSystemsList: rt.coerceOptionalStringArray(
      rt.findQrAnswersByLinkId(qr, "660159010455"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlPublicSystemsList"
    ],
    accessControlPublicSystemsListNotes: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "252003749158"),
    ),
    accessControlFciPostingPreventionProcess: rt.coerceOptionalStringArray(
      rt.findQrAnswersByLinkId(qr, "229261839700"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlFciPostingPreventionProcess"
    ],
    accessControlFciPostingPreventionNotes: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "633971923340"),
    ),
    accessControlAuthorizedPublicSystems: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "624223914711"),
    ),
    accessControlAuthorizedPersonnelCount: rt.coerceOptionalNumber(
      rt.findQrAnswerByLinkId(qr, "374839487767"),
    ),
    accessControlAuthorizedPersonnelDepts: rt.coerceOptionalStringArray(
      rt.findQrAnswersByLinkId(qr, "177243885107"),
    ) as AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses[
      "accessControlAuthorizedPersonnelDepts"
    ],
    accessControlAuthorizedPersonnelNotes: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "163760226494"),
    ),
  };
}

/**
 * NOTE TO DEVELOPERS:
 * -------------------
 * This Interpreter class is provided only as an EXAMPLE scaffold to demonstrate
 * how to consume the normalized type-safe interface generated for this
 * Questionnaire. It shows minimal factories (`fromLhc`, `fromQuestionnaireResponse`)
 * and convenience methods (`validateRequiredFields`, `assessReadiness`) but it is
 * NOT intended for production use.
 *
 * In real applications:
 * - Treat this class as SAMPLE CODE only.
 * - Replace or extend it with proper business logic, rules engines, or validation
 *   frameworks appropriate to your domain.
 * - Do not rely on the simplistic readiness scoring or validation in production
 *   scenarios; they are illustrative, not authoritative.
 *
 * Best practice: use the generated TypeScript interface (`AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses`) as your
 * contract for normalized data, then integrate with your own rules processors,
 * compliance engines, or plain TypeScript/JavaScript functions as needed.
 */
export class AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesInterpreter {
  constructor(
    readonly value:
      AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses,
  ) {}

  /** Factory: build from LHC JSON. */
  static fromLhcFormResponse(
    input: Any,
  ): AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesInterpreter {
    return new AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesInterpreter(
      accessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesLhcFormResponseAdapter(
        input,
      ),
    );
  }

  /** Factory: build from FHIR QuestionnaireResponse. */
  static fromQuestionnaireResponse(
    qr: Any,
  ): AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesInterpreter {
    return new AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesInterpreter(
      accessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesFhirQuestionnaireResponseAdapter(
        qr,
      ),
    );
  }

  /** Check required fields and report any missing or blank. */
  validateRequiredFields(): {
    ok: boolean;
    missing: Array<
      keyof AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses
    >;
  } {
    const missing: Array<
      keyof AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses
    > = [];
    const req: Array<
      keyof AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses
    > = [];
    for (const k of req) {
      const v = (this.value as Any)[k];
      if (rt.isBlank(v)) missing.push(k);
    }
    return { ok: missing.length === 0, missing };
  }

  /**
   * Assess readiness with a simple completeness score. This is meant to be
   * used to help understand how complete the types are and serves as an
   * example of how to use the generated code.
   * - requiredCovered: percentage of required fields that are non-blank
   * - overallFilled: count of non-blank fields among all known properties
   */
  assessReadiness(): {
    formTitle: string;
    requiredCovered: number; // 0..1
    totalRequired: number;
    totalFilled: number;
    totalFields: number;
    missingRequired: Array<
      keyof AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses
    >;
  } {
    const req: Array<
      keyof AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses
    > = [];
    const all: Array<
      keyof AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses
    > = [
      "accessControlPolicyExists",
      "accessControlPolicyElementsItems",
      "accessControlPolicyElementsItemsNotes",
      "accessControlCurrentAccounts",
      "accessControlCountActiveAccounts",
      "accessControlCountInactiveAccounts",
      "accessControlCountServiceAccounts",
      "accessControlCountSharedAccounts",
      "accessControlLeastPrivilegeStatus",
      "accessControlLeastPrivilegeStatusNotes",
      "accessControlAccountLifecycleProcess",
      "accessControlAccountLifecycleProcessNotes",
      "accessControlAccountReviewFrequencyQuestion",
      "accessControlAccountReviewFrequencyNotes",
      "accessControlLeastPrivilegeTransactionStatus",
      "accessControlLeastPrivilegeTransactionStatusNotes",
      "accessControlLimitEmployeeActions",
      "accessControlLimitEmployeeActionsNotes",
      "accessControlRoleLimitedActions",
      "accessControlRoleLimitedActionsNotes",
      "accessControlSensitiveActionApprovalProcess",
      "accessControlSensitiveActionApprovalNotes",
      "accessControlExternalConnectionsStatus",
      "accessControlExternalConnectionsStatusNotes",
      "accessControlExternalSystemTypes",
      "accessControlExternalSystemTypesNotes",
      "accessControlExternalSystemSafetyCheck",
      "accessControlExternalSystemSafetyCheckNotes",
      "accessControlConnectionLimitationsList",
      "accessControlConnectionLimitationsNotes",
      "accessControlPublicInfoProcessStatus",
      "accessControlPublicInfoProcessStatusNotes",
      "accessControlPublicSystemsList",
      "accessControlPublicSystemsListNotes",
      "accessControlFciPostingPreventionProcess",
      "accessControlFciPostingPreventionNotes",
      "accessControlAuthorizedPublicSystems",
      "accessControlAuthorizedPersonnelCount",
      "accessControlAuthorizedPersonnelDepts",
      "accessControlAuthorizedPersonnelNotes",
    ];

    let reqFilled = 0;
    const missingReq: Array<
      keyof AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses
    > = [];
    for (const k of req) {
      const v = (this.value as Any)[k];
      if (!rt.isBlank(v)) reqFilled++;
      else missingReq.push(k);
    }

    let totalFilled = 0;
    for (const k of all) {
      if (!rt.isBlank((this.value as Any)[k])) totalFilled++;
    }

    return {
      formTitle:
        "Access Control Limit Information System Access To Authorized Users And Processes",
      requiredCovered: req.length ? reqFilled / req.length : 1,
      totalRequired: req.length,
      totalFilled,
      totalFields: all.length,
      missingRequired: missingReq,
    };
  }
}

/** FYI: No source request **/
