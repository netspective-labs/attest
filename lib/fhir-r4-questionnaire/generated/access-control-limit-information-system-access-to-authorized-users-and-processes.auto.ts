/**
 * @file access-control-limit-information-system-access-to-authorized-users-and-processes.auto.ts
 * @generated This file was auto-generated at 2025-08-17T01:00:18.917Z from the FHIR R4 Questionnaire "Access Control (Limit information system access to authorized users and processes)".
 * Do not edit this file manually; re-run the generator if the source Questionnaire changes.
 * Profiles: http://hl7.org/fhir/4.0/StructureDefinition/Questionnaire
 *
 * Normalizes LHC JSON and FHIR QuestionnaireResponse into the type-safe `AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses` interface.
 */

// deno-lint-ignore no-explicit-any
type Any = any;
import {
  coerceOptionalNumber,
  coerceOptionalString,
  findLhcValueByLinkId,
  findQrAnswerByLinkId,
  isBlank,
} from "../r4q-runtime.ts";
/**
 * Form Help (from display/help controls):
 * - Limit information system access to authorized users, processes acting on behalf of authorized users, or devices (including other information systems).
 * - Establish clear access control rules, including who can access what information, how access is granted, reviewed, and revoked
 * - Maintain a detailed and up-to-date record of all user accounts, including their access levels and status
 * - Grant users and systems only the minimum access necessary to perform their tasks
 * - Establish and follow formal procedures to manage user accounts throughout their lifecycle
 * - Regularly review user accounts to verify access is still appropriate and remove or adjust accounts as needed
 * - Limit information system access to the types of transactions and functions that authorized users are permitted to execute.
 * - Implement controls to monitor and regulate transactions, ensuring only authorized actions are performed within systems and applications
 * - Limit system functions and capabilities based on user roles to ensure individuals can only perform actions necessary for their job responsibilities
 * - Require formal approval before critical transactions are executed to prevent unauthorized or fraudulent activities.
 * - Verify and control/limit connections to and use of external information systems.
 * - Manage and secure connections to external systems to protect your network from unauthorized access and data breaches.
 * - Use verification techniques to confirm the identity and security of external connections before allowing access to your systems
 * - Define and enforce restrictions on external connections to minimize exposure and reduce security risks.
 * - Control information posted or processed on publicly accessible information systems.
 * - Secure and monitor systems that are accessible to the public to prevent unauthorized access and data leakage.
 * - Establish regular procedures to review and validate information before it is published or shared
 * - Designate and control who is allowed to publish or distribute organizational information
 */
/** Map of normalized property names to their source `linkId`. */
export const AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesLinkIds =
  {
    doYouHaveAnAccessControlPolicy: "744146359806",
    implementationStatus: "184584712182",
    doesYourOrganizationHaveADocumentedAccessControlPolicyThatAddresses:
      "669545773690",
    howManyAccountsAreCurrentlyInYourSystems: "182548770364",
    activeUserAccounts: "927965645729",
    inactiveDisabledUserAccounts: "903940962912",
    serviceAccounts: "338820008158",
    sharedAccounts: "673437974050",
    howIsThePrincipleOfLeastPrivilegeImplemented: "368418823104",
    howAreAccountLifecycleProcessesManaged: "341135397442",
    howFrequentlyAreUserAccountsReviewedForValidityAndAppropriateAccess:
      "563546854643",
    implementationStatus2: "316234331937",
    howDoYouLimitUserAccessToSpecificTransactionsAndFunctions: "589002798804",
    whatTypesOfFunctionsAreRestrictedBasedOnUserRoles: "525896610609",
    howAreHighRiskTransactionsAuthorized: "859148329958",
    implementationStatus3: "358071855489",
    whatTypesOfExternalSystemsDoesYourOrganizationConnectTo: "261758300502",
    howDoYouVerifyExternalSystemConnections: "495111707033",
    whatLimitationsArePlacedOnExternalConnections: "597499672942",
    implementationStatus4: "260717222110",
    whatPubliclyAccessibleSystemsDoesYourOrganizationOperate: "660159010455",
    howDoYouEnsureFciIsNotPostedOnPublicSystems: "229261839700",
    whoIsAuthorizedToPostContentToPublicSystems: "624223914711",
    numberOfAuthorizedPersonnel: "374839487767",
    chooseAllThatApply: "177243885107",
  } as const;

/** Normalized view of "Access Control (Limit information system access to authorized users and processes)" answers. */
export interface AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses {
  /**
   * Do you have an Access Control Policy?
   * linkId: 744146359806
   * FHIR type: choice
   * Options: "Yes", " No - if no, would you like help creating one for your company?"
   * Required: no
   */
  doYouHaveAnAccessControlPolicy?:
    | "Yes"
    | " No - if no, would you like help creating one for your company?";

  /**
   * Implementation Status
   * linkId: 184584712182
   * FHIR type: choice
   * Options: "Fully Implemented", "Partially Implemented", "Not Implemented"
   * Required: no
   */
  implementationStatus?:
    | "Fully Implemented"
    | "Partially Implemented"
    | "Not Implemented";

  /**
   * Does your organization have a documented access control policy that addresses:
   * linkId: 669545773690
   * FHIR type: choice
   * Section: Access Control Policy Elements
   * Options: "Purpose, scope, roles, and responsibilities", "Management commitment", "Coordination among organizational entities", "Compliance requirements"
   * Required: no
   */
  doesYourOrganizationHaveADocumentedAccessControlPolicyThatAddresses?:
    | "Purpose, scope, roles, and responsibilities"
    | "Management commitment"
    | "Coordination among organizational entities"
    | "Compliance requirements";

  /**
   * How many accounts are currently in your systems?
   * linkId: 182548770364
   * FHIR type: display
   * Section: User Account Registry
   * Required: no
   */
  howManyAccountsAreCurrentlyInYourSystems?: string;

  /**
   * Active user accounts:
   * linkId: 927965645729
   * FHIR type: integer
   * Section: User Account Registry
   * Required: no
   */
  activeUserAccounts?: number;

  /**
   * Inactive/disabled user accounts:
   * linkId: 903940962912
   * FHIR type: integer
   * Section: User Account Registry
   * Required: no
   */
  inactiveDisabledUserAccounts?: number;

  /**
   * Service accounts:
   * linkId: 338820008158
   * FHIR type: integer
   * Section: User Account Registry
   * Required: no
   */
  serviceAccounts?: number;

  /**
   * Shared accounts:
   * linkId: 673437974050
   * FHIR type: integer
   * Section: User Account Registry
   * Required: no
   */
  sharedAccounts?: number;

  /**
   * How is the principle of least privilege implemented?
   * linkId: 368418823104
   * FHIR type: choice
   * Section: Principle of Least Privilege Implementation
   * Options: "Fully implemented across all systems", "Partially implemented", "Not implemented"
   * Required: no
   */
  howIsThePrincipleOfLeastPrivilegeImplemented?:
    | "Fully implemented across all systems"
    | "Partially implemented"
    | "Not implemented";

  /**
   * How are account lifecycle processes managed?
   * linkId: 341135397442
   * FHIR type: choice
   * Section: Account Management Processes
   * Options: "Automated identity management system", "Manual process with approval workflow", "Integration with HR systems", " Regular account reviews and recertification"
   * Required: no
   */
  howAreAccountLifecycleProcessesManaged?:
    | "Automated identity management system"
    | "Manual process with approval workflow"
    | "Integration with HR systems"
    | " Regular account reviews and recertification";

  /**
   * How frequently are user accounts reviewed for validity and appropriate access?
   * linkId: 563546854643
   * FHIR type: choice
   * Section: Account Review Frequency
   * Options: "Monthly", " Quarterly", "Annually", "Other (specify):"
   * Required: no
   */
  howFrequentlyAreUserAccountsReviewedForValidityAndAppropriateAccess?:
    | "Monthly"
    | " Quarterly"
    | "Annually"
    | "Other (specify):";

  /**
   * Implementation Status
   * linkId: 316234331937
   * FHIR type: choice
   * Options: "Fully Implemented", "Partially Implemented", "Not Implemented"
   * Required: no
   */
  implementationStatus2?:
    | "Fully Implemented"
    | "Partially Implemented"
    | "Not Implemented";

  /**
   * How do you limit user access to specific transactions and functions?
   * linkId: 589002798804
   * FHIR type: choice
   * Section: Transaction Control Implementation
   * Options: "Role-based access control (RBAC)", "Function-based permissions (create, read, update, delete)", "Application-level access controls", "Time-based access restrictions", "Location-based access restrictions"
   * Required: no
   */
  howDoYouLimitUserAccessToSpecificTransactionsAndFunctions?:
    | "Role-based access control (RBAC)"
    | "Function-based permissions (create, read, update, delete)"
    | "Application-level access controls"
    | "Time-based access restrictions"
    | "Location-based access restrictions";

  /**
   * What types of functions are restricted based on user roles?
   * linkId: 525896610609
   * FHIR type: choice
   * Section: Function Restrictions by Role
   * Options: "Administrative functions (user management, system configuration)", "Financial transactions and approvals", "Data export and bulk download functions", "Report generation and access", "System-level commands and utilities"
   * Required: no
   */
  whatTypesOfFunctionsAreRestrictedBasedOnUserRoles?:
    | "Administrative functions (user management, system configuration)"
    | "Financial transactions and approvals"
    | "Data export and bulk download functions"
    | "Report generation and access"
    | "System-level commands and utilities";

  /**
   * How are high-risk transactions authorized?
   * linkId: 859148329958
   * FHIR type: choice
   * Section: Transaction Authorization Requirements
   * Options: "Manager approval required", "Two-person authorization", "Automated business rules and limits", "No special authorization required"
   * Required: no
   */
  howAreHighRiskTransactionsAuthorized?:
    | "Manager approval required"
    | "Two-person authorization"
    | "Automated business rules and limits"
    | "No special authorization required";

  /**
   * Implementation Status
   * linkId: 358071855489
   * FHIR type: choice
   * Options: " Fully Implemented", " Partially Implemented", " Not Implemented"
   * Required: no
   */
  implementationStatus3?:
    | " Fully Implemented"
    | " Partially Implemented"
    | " Not Implemented";

  /**
   * What types of external systems does your organization connect to?
   * linkId: 261758300502
   * FHIR type: choice
   * Section:  External System Connections
   * Options: "Cloud services (email, file storage, applications)", "Business partner networks", "Vendor/supplier systems", "Government systems and portals", "Personal devices (BYOD)", "Remote access system", "No external connections"
   * Required: no
   */
  whatTypesOfExternalSystemsDoesYourOrganizationConnectTo?:
    | "Cloud services (email, file storage, applications)"
    | "Business partner networks"
    | "Vendor/supplier systems"
    | "Government systems and portals"
    | "Personal devices (BYOD)"
    | "Remote access system"
    | "No external connections";

  /**
   * How do you verify external system connections?
   * linkId: 495111707033
   * FHIR type: choice
   * Section: Connection Verification Methods
   * Options: "Digital certificates and PKI", "VPN connections with authentication", "Firewall rules and IP restrictions", "Signed interconnection agreements", "Continuous monitoring and logging"
   * Required: no
   */
  howDoYouVerifyExternalSystemConnections?:
    | "Digital certificates and PKI"
    | "VPN connections with authentication"
    | "Firewall rules and IP restrictions"
    | "Signed interconnection agreements"
    | "Continuous monitoring and logging";

  /**
   * What limitations are placed on external connections?
   * linkId: 597499672942
   * FHIR type: choice
   * Section: Connection Control Limitations
   * Options: "Time-based access restrictions", "Restrictions on data types that can be shared", "Limited to specific user groups", "Management approval required for each connection", "Comprehensive audit trails and logging"
   * Required: no
   */
  whatLimitationsArePlacedOnExternalConnections?:
    | "Time-based access restrictions"
    | "Restrictions on data types that can be shared"
    | "Limited to specific user groups"
    | "Management approval required for each connection"
    | "Comprehensive audit trails and logging";

  /**
   * Implementation Status
   * linkId: 260717222110
   * FHIR type: choice
   * Options: "Fully Implemented", "Partially Implemented", "Not Implemented"
   * Required: no
   */
  implementationStatus4?:
    | "Fully Implemented"
    | "Partially Implemented"
    | "Not Implemented";

  /**
   * What publicly accessible systems does your organization operate?
   * linkId: 660159010455
   * FHIR type: choice
   * Section: Publicly Accessible Systems
   * Options: "Company website", " Social media accounts", "Customer portals or self-service systems", "Corporate blog or news site", "Public forums or discussion boards", "No publicly accessible systems"
   * Required: no
   */
  whatPubliclyAccessibleSystemsDoesYourOrganizationOperate?:
    | "Company website"
    | " Social media accounts"
    | "Customer portals or self-service systems"
    | "Corporate blog or news site"
    | "Public forums or discussion boards"
    | "No publicly accessible systems";

  /**
   * How do you ensure FCI is not posted on public systems?
   * linkId: 229261839700
   * FHIR type: choice
   * Section: Content Review Process
   * Options: "Pre-publication review and approval process", "Designated reviewers trained to identify FCI", "Automated content scanning for sensitive information", "Periodic audits of published content", "Procedures for rapid removal of inappropriate content"
   * Required: no
   */
  howDoYouEnsureFciIsNotPostedOnPublicSystems?:
    | "Pre-publication review and approval process"
    | "Designated reviewers trained to identify FCI"
    | "Automated content scanning for sensitive information"
    | "Periodic audits of published content"
    | "Procedures for rapid removal of inappropriate content";

  /**
   * Who is authorized to post content to public systems?
   * linkId: 624223914711
   * FHIR type: display
   * Section: Authorized Publishing Personnel
   * Required: no
   */
  whoIsAuthorizedToPostContentToPublicSystems?: string;

  /**
   * Number of authorized personnel:
   * linkId: 374839487767
   * FHIR type: integer
   * Section: Authorized Publishing Personnel
   * Required: no
   */
  numberOfAuthorizedPersonnel?: number;

  /**
   * Choose all that apply:
   * linkId: 177243885107
   * FHIR type: choice
   * Section: Authorized Publishing Personnel
   * Options: "Marketing department", "Communications/PR team", "Executive leadership", "IT administrators"
   * Required: no
   */
  chooseAllThatApply?:
    | "Marketing department"
    | "Communications/PR team"
    | "Executive leadership"
    | "IT administrators";
}

/** Convert an LHC JSON response into a normalized AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses object. */
export function accessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesLhcFormResponseAdapter(
  input: Any,
): AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses {
  return {
    doYouHaveAnAccessControlPolicy: coerceOptionalString(
      findLhcValueByLinkId(input, "744146359806"),
    ),
    implementationStatus: coerceOptionalString(
      findLhcValueByLinkId(input, "184584712182"),
    ),
    doesYourOrganizationHaveADocumentedAccessControlPolicyThatAddresses:
      coerceOptionalString(findLhcValueByLinkId(input, "669545773690")),
    howManyAccountsAreCurrentlyInYourSystems: coerceOptionalString(
      findLhcValueByLinkId(input, "182548770364"),
    ),
    activeUserAccounts: coerceOptionalNumber(
      findLhcValueByLinkId(input, "927965645729"),
    ),
    inactiveDisabledUserAccounts: coerceOptionalNumber(
      findLhcValueByLinkId(input, "903940962912"),
    ),
    serviceAccounts: coerceOptionalNumber(
      findLhcValueByLinkId(input, "338820008158"),
    ),
    sharedAccounts: coerceOptionalNumber(
      findLhcValueByLinkId(input, "673437974050"),
    ),
    howIsThePrincipleOfLeastPrivilegeImplemented: coerceOptionalString(
      findLhcValueByLinkId(input, "368418823104"),
    ),
    howAreAccountLifecycleProcessesManaged: coerceOptionalString(
      findLhcValueByLinkId(input, "341135397442"),
    ),
    howFrequentlyAreUserAccountsReviewedForValidityAndAppropriateAccess:
      coerceOptionalString(findLhcValueByLinkId(input, "563546854643")),
    implementationStatus2: coerceOptionalString(
      findLhcValueByLinkId(input, "316234331937"),
    ),
    howDoYouLimitUserAccessToSpecificTransactionsAndFunctions:
      coerceOptionalString(findLhcValueByLinkId(input, "589002798804")),
    whatTypesOfFunctionsAreRestrictedBasedOnUserRoles: coerceOptionalString(
      findLhcValueByLinkId(input, "525896610609"),
    ),
    howAreHighRiskTransactionsAuthorized: coerceOptionalString(
      findLhcValueByLinkId(input, "859148329958"),
    ),
    implementationStatus3: coerceOptionalString(
      findLhcValueByLinkId(input, "358071855489"),
    ),
    whatTypesOfExternalSystemsDoesYourOrganizationConnectTo:
      coerceOptionalString(findLhcValueByLinkId(input, "261758300502")),
    howDoYouVerifyExternalSystemConnections: coerceOptionalString(
      findLhcValueByLinkId(input, "495111707033"),
    ),
    whatLimitationsArePlacedOnExternalConnections: coerceOptionalString(
      findLhcValueByLinkId(input, "597499672942"),
    ),
    implementationStatus4: coerceOptionalString(
      findLhcValueByLinkId(input, "260717222110"),
    ),
    whatPubliclyAccessibleSystemsDoesYourOrganizationOperate:
      coerceOptionalString(findLhcValueByLinkId(input, "660159010455")),
    howDoYouEnsureFciIsNotPostedOnPublicSystems: coerceOptionalString(
      findLhcValueByLinkId(input, "229261839700"),
    ),
    whoIsAuthorizedToPostContentToPublicSystems: coerceOptionalString(
      findLhcValueByLinkId(input, "624223914711"),
    ),
    numberOfAuthorizedPersonnel: coerceOptionalNumber(
      findLhcValueByLinkId(input, "374839487767"),
    ),
    chooseAllThatApply: coerceOptionalString(
      findLhcValueByLinkId(input, "177243885107"),
    ),
  };
}

/** Convert a FHIR QuestionnaireResponse into a normalized AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses object. */
export function accessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesFhirQuestionnaireResponseAdapter(
  qr: Any,
): AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses {
  return {
    doYouHaveAnAccessControlPolicy: coerceOptionalString(
      findQrAnswerByLinkId(qr, "744146359806"),
    ),
    implementationStatus: coerceOptionalString(
      findQrAnswerByLinkId(qr, "184584712182"),
    ),
    doesYourOrganizationHaveADocumentedAccessControlPolicyThatAddresses:
      coerceOptionalString(findQrAnswerByLinkId(qr, "669545773690")),
    howManyAccountsAreCurrentlyInYourSystems: coerceOptionalString(
      findQrAnswerByLinkId(qr, "182548770364"),
    ),
    activeUserAccounts: coerceOptionalNumber(
      findQrAnswerByLinkId(qr, "927965645729"),
    ),
    inactiveDisabledUserAccounts: coerceOptionalNumber(
      findQrAnswerByLinkId(qr, "903940962912"),
    ),
    serviceAccounts: coerceOptionalNumber(
      findQrAnswerByLinkId(qr, "338820008158"),
    ),
    sharedAccounts: coerceOptionalNumber(
      findQrAnswerByLinkId(qr, "673437974050"),
    ),
    howIsThePrincipleOfLeastPrivilegeImplemented: coerceOptionalString(
      findQrAnswerByLinkId(qr, "368418823104"),
    ),
    howAreAccountLifecycleProcessesManaged: coerceOptionalString(
      findQrAnswerByLinkId(qr, "341135397442"),
    ),
    howFrequentlyAreUserAccountsReviewedForValidityAndAppropriateAccess:
      coerceOptionalString(findQrAnswerByLinkId(qr, "563546854643")),
    implementationStatus2: coerceOptionalString(
      findQrAnswerByLinkId(qr, "316234331937"),
    ),
    howDoYouLimitUserAccessToSpecificTransactionsAndFunctions:
      coerceOptionalString(findQrAnswerByLinkId(qr, "589002798804")),
    whatTypesOfFunctionsAreRestrictedBasedOnUserRoles: coerceOptionalString(
      findQrAnswerByLinkId(qr, "525896610609"),
    ),
    howAreHighRiskTransactionsAuthorized: coerceOptionalString(
      findQrAnswerByLinkId(qr, "859148329958"),
    ),
    implementationStatus3: coerceOptionalString(
      findQrAnswerByLinkId(qr, "358071855489"),
    ),
    whatTypesOfExternalSystemsDoesYourOrganizationConnectTo:
      coerceOptionalString(findQrAnswerByLinkId(qr, "261758300502")),
    howDoYouVerifyExternalSystemConnections: coerceOptionalString(
      findQrAnswerByLinkId(qr, "495111707033"),
    ),
    whatLimitationsArePlacedOnExternalConnections: coerceOptionalString(
      findQrAnswerByLinkId(qr, "597499672942"),
    ),
    implementationStatus4: coerceOptionalString(
      findQrAnswerByLinkId(qr, "260717222110"),
    ),
    whatPubliclyAccessibleSystemsDoesYourOrganizationOperate:
      coerceOptionalString(findQrAnswerByLinkId(qr, "660159010455")),
    howDoYouEnsureFciIsNotPostedOnPublicSystems: coerceOptionalString(
      findQrAnswerByLinkId(qr, "229261839700"),
    ),
    whoIsAuthorizedToPostContentToPublicSystems: coerceOptionalString(
      findQrAnswerByLinkId(qr, "624223914711"),
    ),
    numberOfAuthorizedPersonnel: coerceOptionalNumber(
      findQrAnswerByLinkId(qr, "374839487767"),
    ),
    chooseAllThatApply: coerceOptionalString(
      findQrAnswerByLinkId(qr, "177243885107"),
    ),
  };
}

/** High-level interpreter with factories, validation, and readiness scoring. */
export class AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesInterpreter {
  constructor(
    readonly value:
      AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses,
  ) {}

  /** Factory: build from LHC JSON. */
  static fromLhcFormResponse(
    input: Any,
  ): AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesInterpreter {
    return new AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesInterpreter(
      accessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesLhcFormResponseAdapter(
        input,
      ),
    );
  }

  /** Factory: build from FHIR QuestionnaireResponse. */
  static fromQuestionnaireResponse(
    qr: Any,
  ): AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesInterpreter {
    return new AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesInterpreter(
      accessControlLimitInformationSystemAccessToAuthorizedUsersAndProcessesFhirQuestionnaireResponseAdapter(
        qr,
      ),
    );
  }

  /** Check required fields and report any missing or blank. */
  validateRequiredFields(): {
    ok: boolean;
    missing: Array<
      keyof AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses
    >;
  } {
    const missing: Array<
      keyof AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses
    > = [];
    const req: Array<
      keyof AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses
    > = [];
    for (const k of req) {
      const v = (this.value as Any)[k];
      if (isBlank(v)) missing.push(k);
    }
    return { ok: missing.length === 0, missing };
  }

  /**
   * Assess readiness with a simple completeness score. This is meant to be
   * used to help understand how complete the types are and serves as an
   * example of how to use the generated code.
   * - requiredCovered: percentage of required fields that are non-blank
   * - overallFilled: count of non-blank fields among all known properties
   */
  assessReadiness(): {
    formTitle: string;
    requiredCovered: number; // 0..1
    totalRequired: number;
    totalFilled: number;
    totalFields: number;
    missingRequired: Array<
      keyof AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses
    >;
  } {
    const req: Array<
      keyof AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses
    > = [];
    const all: Array<
      keyof AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses
    > = [
      "doYouHaveAnAccessControlPolicy",
      "implementationStatus",
      "doesYourOrganizationHaveADocumentedAccessControlPolicyThatAddresses",
      "howManyAccountsAreCurrentlyInYourSystems",
      "activeUserAccounts",
      "inactiveDisabledUserAccounts",
      "serviceAccounts",
      "sharedAccounts",
      "howIsThePrincipleOfLeastPrivilegeImplemented",
      "howAreAccountLifecycleProcessesManaged",
      "howFrequentlyAreUserAccountsReviewedForValidityAndAppropriateAccess",
      "implementationStatus2",
      "howDoYouLimitUserAccessToSpecificTransactionsAndFunctions",
      "whatTypesOfFunctionsAreRestrictedBasedOnUserRoles",
      "howAreHighRiskTransactionsAuthorized",
      "implementationStatus3",
      "whatTypesOfExternalSystemsDoesYourOrganizationConnectTo",
      "howDoYouVerifyExternalSystemConnections",
      "whatLimitationsArePlacedOnExternalConnections",
      "implementationStatus4",
      "whatPubliclyAccessibleSystemsDoesYourOrganizationOperate",
      "howDoYouEnsureFciIsNotPostedOnPublicSystems",
      "whoIsAuthorizedToPostContentToPublicSystems",
      "numberOfAuthorizedPersonnel",
      "chooseAllThatApply",
    ];

    let reqFilled = 0;
    const missingReq: Array<
      keyof AccessControlLimitInformationSystemAccessToAuthorizedUsersAndProcesses
    > = [];
    for (const k of req) {
      const v = (this.value as Any)[k];
      if (!isBlank(v)) reqFilled++;
      else missingReq.push(k);
    }

    let totalFilled = 0;
    for (const k of all) {
      if (!isBlank((this.value as Any)[k])) totalFilled++;
    }

    return {
      formTitle:
        "Access Control (Limit information system access to authorized users and processes)",
      requiredCovered: req.length ? reqFilled / req.length : 1,
      totalRequired: req.length,
      totalFilled,
      totalFields: all.length,
      missingRequired: missingReq,
    };
  }
}
