import * as rt from "../r4q-runtime.ts";
/**
 * @file physical-protection-limit-physical-access-to-information-systems-and-facilities.auto.ts
 * @generated This file was auto-generated from the FHIR R4 Questionnaire "Physical Protection (Limit physical access to information systems and facilities)".
 * Do not edit this file manually; re-run the generator if the source Questionnaire changes.
 * Profiles: http://hl7.org/fhir/4.0/StructureDefinition/Questionnaire
 *
 * Normalizes LHC JSON and FHIR QuestionnaireResponse into the type-safe `PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities` interface.
 */

// this is the module signature, used by importers to identify the module
// using r4q-runtime.ts `moduleSignature` function
export const physicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilitiesModuleSignature: rt.ModuleSignature = {
    title: "Physical Protection (Limit physical access to information systems and facilities)",
    filename: "physical-protection-limit-physical-access-to-information-systems-and-facilities.auto.ts",
    titleCamel: "`physicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities`",
    titlePascal: "`PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities`",
    titleKebab: "`physical-protection-limit-physical-access-to-information-systems-and-facilities`",
    lhcFormResponseAdapterFnName: "physicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilitiesLhcFormResponseAdapter",
    fhirQuestionnaireResponseAdapterFnName: "physicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilitiesFhirQuestionnaireResponseAdapter",
    sourceTextConstName: "physicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilitiesSource",
}

// deno-lint-ignore no-explicit-any
type Any = any;
/**
 * Form Help (from display/help controls):
 * - Maintain an updated list of individuals authorized to access secure physical areas to ensure proper access control.
 * - Control and restrict access to sensitive physical locations to prevent unauthorized entry and protect assets.
 * - Establish formal procedures to grant, review, and revoke physical access permissions for personnel.
 * - Issue and manage secure access credentials to verify and control entry to restricted physical areas.
 * - Limit physical access to authorized areas during specific times to reduce security risks outside business hours.
 * - Limit physical access to organizational information systems, equipment, and the respective operating environments to authorized individuals
 * - Require authorized personnel to accompany visitors while they are in secure areas to ensure safety and security.
 * - Implement procedures to verify and record visitor identities before granting physical access to facilities.
 * - Track and record visitor movements within facilities to detect and prevent unauthorized activities.
 * - Define who is permitted to escort visitors and ensure they understand their responsibilities for security and supervision.
 * - Escort visitors and monitor visitor activity
 * - Implement methods to accurately record entry and exit activities in secure areas for audit and investigation purposes.
 * - Record key details such as date, time, personnel identity, and access points to ensure comprehensive tracking of physical access events.
 * - Maintain and regularly review access logs to detect anomalies and support security investigations.
 * - Keep an up-to-date inventory of all devices used to control physical access, such as card readers and locks, to ensure proper management and security.
 * - Implement procedures to configure, monitor, and maintain physical access devices to prevent unauthorized use or tampering.
 * - Apply security controls to protect physical access devices from damage, tampering, or unauthorized modification.
 * - Regularly perform maintenance and apply updates to physical access devices to ensure their reliability and security.
 */
/** Map of normalized property names to their source `linkId`. */
export const physicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilitiesLinkIds = {
  howManyIndividualsAreAuthorizedForPhysicalAccessToFciAreasFillInTheTotalForEach: "324592389560",
  fullTimeEmployees: "436045572485",
  contractors: "857782926958",
  partTimeEmployees: "944400994758",
  visitorsWithEscort: "571574306369",
  whatAreasRequireControlledPhysicalAccess: "702794466613",
  whoAuthorizesPhysicalAccessToControlledAreas: "784352573703",
  whatTypesOfPhysicalAccessCredentialsAreIssued: "773851219827",
  areThereTimeBasedRestrictionsOnPhysicalAccess: "208747627440",
  implementationStatus: "660777712272",
  doesYourOrganizationRequireAllVisitorsToBeEscorted: "684131391577",
  howAreVisitorsIdentifiedAndDistinguishedFromEmployees: "400470675855",
  howIsVisitorActivityMonitoredWhileOnPremises: "829474009766",
  whoIsAuthorizedToEscortVisitors: "422650784362",
  implementationStatus2: "231843690847",
  howDoYouLogPhysicalAccessToYourFacilities: "734633292283",
  whatInformationIsCapturedInYourPhysicalAccessLogsInformationCapturedInLogs: "174905707594",
  howLongArePhysicalAccessLogsRetained: "245305278102",
  howFrequentlyAreAccessLogsReviewed: "741567851452",
  whoReviewsThePhysicalAccessLogs: "745836226925",
  implementationStatus3: "320438032270",
  whatTypesOfPhysicalAccessDevicesDoesYourOrganizationUse: "903629274308",
  howArePhysicalAccessDevicesControlledAndManaged: "173451266066",
  whatSecurityMeasuresProtectPhysicalAccessDevices: "911514884520",
  howFrequentlyAreElectronicAccessSystemsUpdated: "466342459779",
  implementationStatus4: "294892506040"
} as const;

/** Normalized view of "Physical Protection (Limit physical access to information systems and facilities)" answers. */
export interface PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities {
  /**
   * How many individuals are authorized for physical access to FCI areas (fill in the total for each)?
   * linkId: 324592389560
   * FHIR type: display
   * Section: PE.L1-3.10.1 - Physical Access Authorization > 1. Authorized Personnel Inventory
   * Required: no
   */
  howManyIndividualsAreAuthorizedForPhysicalAccessToFciAreasFillInTheTotalForEach?: string;

  /**
   * Full-time employees:
   * linkId: 436045572485
   * FHIR type: integer
   * Section: PE.L1-3.10.1 - Physical Access Authorization > 1. Authorized Personnel Inventory
   * Required: no
   */
  fullTimeEmployees?: number;

  /**
   * Contractors:
   * linkId: 857782926958
   * FHIR type: integer
   * Section: PE.L1-3.10.1 - Physical Access Authorization > 1. Authorized Personnel Inventory
   * Required: no
   */
  contractors?: number;

  /**
   * Part-time employees:
   * linkId: 944400994758
   * FHIR type: integer
   * Section: PE.L1-3.10.1 - Physical Access Authorization > 1. Authorized Personnel Inventory
   * Required: no
   */
  partTimeEmployees?: number;

  /**
   * Visitors (with escort):
   * linkId: 571574306369
   * FHIR type: integer
   * Section: PE.L1-3.10.1 - Physical Access Authorization > 1. Authorized Personnel Inventory
   * Required: no
   */
  visitorsWithEscort?: number;

  /**
   * What areas require controlled physical access?
   * linkId: 702794466613
   * FHIR type: string
   * Section: PE.L1-3.10.1 - Physical Access Authorization > 2. Physical Access Areas
   * Required: no
   */
  whatAreasRequireControlledPhysicalAccess?: string[];

  /**
   * Who authorizes physical access to controlled areas?
   * linkId: 784352573703
   * FHIR type: string
   * Section: PE.L1-3.10.1 - Physical Access Authorization > 3. Authorization Process
   * Required: no
   */
  whoAuthorizesPhysicalAccessToControlledAreas?: string[];

  /**
   * What types of physical access credentials are issued?
   * linkId: 773851219827
   * FHIR type: string
   * Section: PE.L1-3.10.1 - Physical Access Authorization > 4. Access Credentials
   * Required: no
   */
  whatTypesOfPhysicalAccessCredentialsAreIssued?: string[];

  /**
   * Are there time-based restrictions on physical access?
   * linkId: 208747627440
   * FHIR type: string
   * Section: PE.L1-3.10.1 - Physical Access Authorization > 5. Time-Based Access Restrictions
   * Required: no
   */
  areThereTimeBasedRestrictionsOnPhysicalAccess?: string[];

  /**
   * Implementation Status
   * linkId: 660777712272
   * FHIR type: string
   * Section: PE.L1-3.10.1 - Physical Access Authorization
   * Required: no
   */
  implementationStatus?: string;

  /**
   * Does your organization require all visitors to be escorted?
   * linkId: 684131391577
   * FHIR type: string
   * Section: PE.L1-3.10.3 - Escort Visitors > 1. Visitor Escort Policy
   * Required: no
   */
  doesYourOrganizationRequireAllVisitorsToBeEscorted?: string[];

  /**
   * How are visitors identified and distinguished from employees?
   * linkId: 400470675855
   * FHIR type: string
   * Section: PE.L1-3.10.3 - Escort Visitors > 2. Visitor Identification
   * Required: no
   */
  howAreVisitorsIdentifiedAndDistinguishedFromEmployees?: string[];

  /**
   * How is visitor activity monitored while on premises?
   * linkId: 829474009766
   * FHIR type: string
   * Section: PE.L1-3.10.3 - Escort Visitors > 3. Visitor Activity Monitoring
   * Required: no
   */
  howIsVisitorActivityMonitoredWhileOnPremises?: string[];

  /**
   * Who is authorized to escort visitors?
   * linkId: 422650784362
   * FHIR type: string
   * Section: PE.L1-3.10.3 - Escort Visitors > 4. Escort Authorization
   * Required: no
   */
  whoIsAuthorizedToEscortVisitors?: string[];

  /**
   * Implementation Status
   * linkId: 231843690847
   * FHIR type: string
   * Section: PE.L1-3.10.3 - Escort Visitors
   * Required: no
   */
  implementationStatus2?: string;

  /**
   * How do you log physical access to your facilities?
   * linkId: 734633292283
   * FHIR type: string
   * Section: PE.L1-3.10.4 - Physical Access Logs > 1. Access Logging Methods
   * Required: no
   */
  howDoYouLogPhysicalAccessToYourFacilities?: string[];

  /**
   * What information is captured in your physical access logs Information Captured in Logs?
   * linkId: 174905707594
   * FHIR type: string
   * Section: PE.L1-3.10.4 - Physical Access Logs > 2. Information Captured in Logs
   * Required: no
   */
  whatInformationIsCapturedInYourPhysicalAccessLogsInformationCapturedInLogs?: string[];

  /**
   * How long are physical access logs retained?
   * linkId: 245305278102
   * FHIR type: string
   * Section: PE.L1-3.10.4 - Physical Access Logs > 3. Log Retention and Review 
   * Required: no
   */
  howLongArePhysicalAccessLogsRetained?: string;

  /**
   * How frequently are access logs reviewed?
   * linkId: 741567851452
   * FHIR type: string
   * Section: PE.L1-3.10.4 - Physical Access Logs > 3. Log Retention and Review 
   * Required: no
   */
  howFrequentlyAreAccessLogsReviewed?: string;

  /**
   * Who reviews the physical access logs?
   * linkId: 745836226925
   * FHIR type: string
   * Section: PE.L1-3.10.4 - Physical Access Logs > 3. Log Retention and Review 
   * Required: no
   */
  whoReviewsThePhysicalAccessLogs?: string[];

  /**
   * Implementation Status
   * linkId: 320438032270
   * FHIR type: string
   * Section: PE.L1-3.10.4 - Physical Access Logs
   * Required: no
   */
  implementationStatus3?: string;

  /**
   * What types of physical access devices does your organization use?
   * linkId: 903629274308
   * FHIR type: string
   * Section: PE.L1-3.10.5 - Manage Physical Access Devices > 1. Physical Access Device Inventory 
   * Required: no
   */
  whatTypesOfPhysicalAccessDevicesDoesYourOrganizationUse?: string[];

  /**
   * How are physical access devices controlled and managed?
   * linkId: 173451266066
   * FHIR type: string
   * Section: PE.L1-3.10.5 - Manage Physical Access Devices > 2. Device Control and Management 
   * Required: no
   */
  howArePhysicalAccessDevicesControlledAndManaged?: string[];

  /**
   * What security measures protect physical access devices?
   * linkId: 911514884520
   * FHIR type: string
   * Section: PE.L1-3.10.5 - Manage Physical Access Devices > 3. Device Security Measures 
   * Required: no
   */
  whatSecurityMeasuresProtectPhysicalAccessDevices?: string[];

  /**
   * How frequently are electronic access systems updated?
   * linkId: 466342459779
   * FHIR type: string
   * Section: PE.L1-3.10.5 - Manage Physical Access Devices > 4. Device Maintenance and Updates
   * Required: no
   */
  howFrequentlyAreElectronicAccessSystemsUpdated?: string;

  /**
   * Implementation Status
   * linkId: 294892506040
   * FHIR type: string
   * Section: PE.L1-3.10.5 - Manage Physical Access Devices
   * Required: no
   */
  implementationStatus4?: string;
}

/** Convert an LHC JSON response into a normalized PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities object. */
export function physicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilitiesLhcFormResponseAdapter(input: Any): PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities {
  return {
  howManyIndividualsAreAuthorizedForPhysicalAccessToFciAreasFillInTheTotalForEach: rt.coerceOptionalString(rt.findLhcValueByLinkId(input, "324592389560")),
  fullTimeEmployees: rt.coerceOptionalNumber(rt.findLhcValueByLinkId(input, "436045572485")),
  contractors: rt.coerceOptionalNumber(rt.findLhcValueByLinkId(input, "857782926958")),
  partTimeEmployees: rt.coerceOptionalNumber(rt.findLhcValueByLinkId(input, "944400994758")),
  visitorsWithEscort: rt.coerceOptionalNumber(rt.findLhcValueByLinkId(input, "571574306369")),
  whatAreasRequireControlledPhysicalAccess: rt.coerceOptionalStringArray(rt.findLhcValueByLinkId(input, "702794466613")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["whatAreasRequireControlledPhysicalAccess"],
  whoAuthorizesPhysicalAccessToControlledAreas: rt.coerceOptionalStringArray(rt.findLhcValueByLinkId(input, "784352573703")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["whoAuthorizesPhysicalAccessToControlledAreas"],
  whatTypesOfPhysicalAccessCredentialsAreIssued: rt.coerceOptionalStringArray(rt.findLhcValueByLinkId(input, "773851219827")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["whatTypesOfPhysicalAccessCredentialsAreIssued"],
  areThereTimeBasedRestrictionsOnPhysicalAccess: rt.coerceOptionalStringArray(rt.findLhcValueByLinkId(input, "208747627440")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["areThereTimeBasedRestrictionsOnPhysicalAccess"],
  implementationStatus: rt.coerceOptionalString(rt.findLhcValueByLinkId(input, "660777712272")),
  doesYourOrganizationRequireAllVisitorsToBeEscorted: rt.coerceOptionalStringArray(rt.findLhcValueByLinkId(input, "684131391577")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["doesYourOrganizationRequireAllVisitorsToBeEscorted"],
  howAreVisitorsIdentifiedAndDistinguishedFromEmployees: rt.coerceOptionalStringArray(rt.findLhcValueByLinkId(input, "400470675855")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["howAreVisitorsIdentifiedAndDistinguishedFromEmployees"],
  howIsVisitorActivityMonitoredWhileOnPremises: rt.coerceOptionalStringArray(rt.findLhcValueByLinkId(input, "829474009766")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["howIsVisitorActivityMonitoredWhileOnPremises"],
  whoIsAuthorizedToEscortVisitors: rt.coerceOptionalStringArray(rt.findLhcValueByLinkId(input, "422650784362")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["whoIsAuthorizedToEscortVisitors"],
  implementationStatus2: rt.coerceOptionalString(rt.findLhcValueByLinkId(input, "231843690847")),
  howDoYouLogPhysicalAccessToYourFacilities: rt.coerceOptionalStringArray(rt.findLhcValueByLinkId(input, "734633292283")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["howDoYouLogPhysicalAccessToYourFacilities"],
  whatInformationIsCapturedInYourPhysicalAccessLogsInformationCapturedInLogs: rt.coerceOptionalStringArray(rt.findLhcValueByLinkId(input, "174905707594")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["whatInformationIsCapturedInYourPhysicalAccessLogsInformationCapturedInLogs"],
  howLongArePhysicalAccessLogsRetained: rt.coerceOptionalString(rt.findLhcValueByLinkId(input, "245305278102")),
  howFrequentlyAreAccessLogsReviewed: rt.coerceOptionalString(rt.findLhcValueByLinkId(input, "741567851452")),
  whoReviewsThePhysicalAccessLogs: rt.coerceOptionalStringArray(rt.findLhcValueByLinkId(input, "745836226925")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["whoReviewsThePhysicalAccessLogs"],
  implementationStatus3: rt.coerceOptionalString(rt.findLhcValueByLinkId(input, "320438032270")),
  whatTypesOfPhysicalAccessDevicesDoesYourOrganizationUse: rt.coerceOptionalStringArray(rt.findLhcValueByLinkId(input, "903629274308")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["whatTypesOfPhysicalAccessDevicesDoesYourOrganizationUse"],
  howArePhysicalAccessDevicesControlledAndManaged: rt.coerceOptionalStringArray(rt.findLhcValueByLinkId(input, "173451266066")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["howArePhysicalAccessDevicesControlledAndManaged"],
  whatSecurityMeasuresProtectPhysicalAccessDevices: rt.coerceOptionalStringArray(rt.findLhcValueByLinkId(input, "911514884520")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["whatSecurityMeasuresProtectPhysicalAccessDevices"],
  howFrequentlyAreElectronicAccessSystemsUpdated: rt.coerceOptionalString(rt.findLhcValueByLinkId(input, "466342459779")),
  implementationStatus4: rt.coerceOptionalString(rt.findLhcValueByLinkId(input, "294892506040")),
  };
}

/** Convert a FHIR QuestionnaireResponse into a normalized PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities object. */
export function physicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilitiesFhirQuestionnaireResponseAdapter(qr: Any): PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities {
  return {
  howManyIndividualsAreAuthorizedForPhysicalAccessToFciAreasFillInTheTotalForEach: rt.coerceOptionalString(rt.findQrAnswerByLinkId(qr, "324592389560")),
  fullTimeEmployees: rt.coerceOptionalNumber(rt.findQrAnswerByLinkId(qr, "436045572485")),
  contractors: rt.coerceOptionalNumber(rt.findQrAnswerByLinkId(qr, "857782926958")),
  partTimeEmployees: rt.coerceOptionalNumber(rt.findQrAnswerByLinkId(qr, "944400994758")),
  visitorsWithEscort: rt.coerceOptionalNumber(rt.findQrAnswerByLinkId(qr, "571574306369")),
  whatAreasRequireControlledPhysicalAccess: rt.coerceOptionalStringArray(rt.findQrAnswersByLinkId(qr, "702794466613")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["whatAreasRequireControlledPhysicalAccess"],
  whoAuthorizesPhysicalAccessToControlledAreas: rt.coerceOptionalStringArray(rt.findQrAnswersByLinkId(qr, "784352573703")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["whoAuthorizesPhysicalAccessToControlledAreas"],
  whatTypesOfPhysicalAccessCredentialsAreIssued: rt.coerceOptionalStringArray(rt.findQrAnswersByLinkId(qr, "773851219827")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["whatTypesOfPhysicalAccessCredentialsAreIssued"],
  areThereTimeBasedRestrictionsOnPhysicalAccess: rt.coerceOptionalStringArray(rt.findQrAnswersByLinkId(qr, "208747627440")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["areThereTimeBasedRestrictionsOnPhysicalAccess"],
  implementationStatus: rt.coerceOptionalString(rt.findQrAnswerByLinkId(qr, "660777712272")),
  doesYourOrganizationRequireAllVisitorsToBeEscorted: rt.coerceOptionalStringArray(rt.findQrAnswersByLinkId(qr, "684131391577")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["doesYourOrganizationRequireAllVisitorsToBeEscorted"],
  howAreVisitorsIdentifiedAndDistinguishedFromEmployees: rt.coerceOptionalStringArray(rt.findQrAnswersByLinkId(qr, "400470675855")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["howAreVisitorsIdentifiedAndDistinguishedFromEmployees"],
  howIsVisitorActivityMonitoredWhileOnPremises: rt.coerceOptionalStringArray(rt.findQrAnswersByLinkId(qr, "829474009766")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["howIsVisitorActivityMonitoredWhileOnPremises"],
  whoIsAuthorizedToEscortVisitors: rt.coerceOptionalStringArray(rt.findQrAnswersByLinkId(qr, "422650784362")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["whoIsAuthorizedToEscortVisitors"],
  implementationStatus2: rt.coerceOptionalString(rt.findQrAnswerByLinkId(qr, "231843690847")),
  howDoYouLogPhysicalAccessToYourFacilities: rt.coerceOptionalStringArray(rt.findQrAnswersByLinkId(qr, "734633292283")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["howDoYouLogPhysicalAccessToYourFacilities"],
  whatInformationIsCapturedInYourPhysicalAccessLogsInformationCapturedInLogs: rt.coerceOptionalStringArray(rt.findQrAnswersByLinkId(qr, "174905707594")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["whatInformationIsCapturedInYourPhysicalAccessLogsInformationCapturedInLogs"],
  howLongArePhysicalAccessLogsRetained: rt.coerceOptionalString(rt.findQrAnswerByLinkId(qr, "245305278102")),
  howFrequentlyAreAccessLogsReviewed: rt.coerceOptionalString(rt.findQrAnswerByLinkId(qr, "741567851452")),
  whoReviewsThePhysicalAccessLogs: rt.coerceOptionalStringArray(rt.findQrAnswersByLinkId(qr, "745836226925")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["whoReviewsThePhysicalAccessLogs"],
  implementationStatus3: rt.coerceOptionalString(rt.findQrAnswerByLinkId(qr, "320438032270")),
  whatTypesOfPhysicalAccessDevicesDoesYourOrganizationUse: rt.coerceOptionalStringArray(rt.findQrAnswersByLinkId(qr, "903629274308")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["whatTypesOfPhysicalAccessDevicesDoesYourOrganizationUse"],
  howArePhysicalAccessDevicesControlledAndManaged: rt.coerceOptionalStringArray(rt.findQrAnswersByLinkId(qr, "173451266066")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["howArePhysicalAccessDevicesControlledAndManaged"],
  whatSecurityMeasuresProtectPhysicalAccessDevices: rt.coerceOptionalStringArray(rt.findQrAnswersByLinkId(qr, "911514884520")) as PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities["whatSecurityMeasuresProtectPhysicalAccessDevices"],
  howFrequentlyAreElectronicAccessSystemsUpdated: rt.coerceOptionalString(rt.findQrAnswerByLinkId(qr, "466342459779")),
  implementationStatus4: rt.coerceOptionalString(rt.findQrAnswerByLinkId(qr, "294892506040")),
  };
}

/**
 * NOTE TO DEVELOPERS:
 * -------------------
 * This Interpreter class is provided only as an EXAMPLE scaffold to demonstrate
 * how to consume the normalized type-safe interface generated for this
 * Questionnaire. It shows minimal factories (`fromLhc`, `fromQuestionnaireResponse`)
 * and convenience methods (`validateRequiredFields`, `assessReadiness`) but it is
 * NOT intended for production use.
 *
 * In real applications:
 * - Treat this class as SAMPLE CODE only.
 * - Replace or extend it with proper business logic, rules engines, or validation
 *   frameworks appropriate to your domain.
 * - Do not rely on the simplistic readiness scoring or validation in production
 *   scenarios; they are illustrative, not authoritative.
 *
 * Best practice: use the generated TypeScript interface (`PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities`) as your
 * contract for normalized data, then integrate with your own rules processors,
 * compliance engines, or plain TypeScript/JavaScript functions as needed.
 */
export class PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilitiesInterpreter {
  constructor(readonly value: PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities) {}

  /** Factory: build from LHC JSON. */
  static fromLhcFormResponse(input: Any): PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilitiesInterpreter {
    return new PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilitiesInterpreter(physicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilitiesLhcFormResponseAdapter(input));
  }

  /** Factory: build from FHIR QuestionnaireResponse. */
  static fromQuestionnaireResponse(qr: Any): PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilitiesInterpreter {
    return new PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilitiesInterpreter(physicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilitiesFhirQuestionnaireResponseAdapter(qr));
  }

  /** Check required fields and report any missing or blank. */
  validateRequiredFields(): { ok: boolean; missing: Array<keyof PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities> } {
    const missing: Array<keyof PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities> = [];
    const req: Array<keyof PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities> = [];
    for (const k of req) {
      const v = (this.value as Any)[k];
      if (rt.isBlank(v)) missing.push(k);
    }
    return { ok: missing.length === 0, missing };
  }

  /**
   * Assess readiness with a simple completeness score. This is meant to be
   * used to help understand how complete the types are and serves as an
   * example of how to use the generated code.
   * - requiredCovered: percentage of required fields that are non-blank
   * - overallFilled: count of non-blank fields among all known properties
   */
  assessReadiness(): {
    formTitle: string;
    requiredCovered: number; // 0..1
    totalRequired: number;
    totalFilled: number;
    totalFields: number;
    missingRequired: Array<keyof PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities>;
  } {
    const req: Array<keyof PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities> = [];
    const all: Array<keyof PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities> = ["howManyIndividualsAreAuthorizedForPhysicalAccessToFciAreasFillInTheTotalForEach", "fullTimeEmployees", "contractors", "partTimeEmployees", "visitorsWithEscort", "whatAreasRequireControlledPhysicalAccess", "whoAuthorizesPhysicalAccessToControlledAreas", "whatTypesOfPhysicalAccessCredentialsAreIssued", "areThereTimeBasedRestrictionsOnPhysicalAccess", "implementationStatus", "doesYourOrganizationRequireAllVisitorsToBeEscorted", "howAreVisitorsIdentifiedAndDistinguishedFromEmployees", "howIsVisitorActivityMonitoredWhileOnPremises", "whoIsAuthorizedToEscortVisitors", "implementationStatus2", "howDoYouLogPhysicalAccessToYourFacilities", "whatInformationIsCapturedInYourPhysicalAccessLogsInformationCapturedInLogs", "howLongArePhysicalAccessLogsRetained", "howFrequentlyAreAccessLogsReviewed", "whoReviewsThePhysicalAccessLogs", "implementationStatus3", "whatTypesOfPhysicalAccessDevicesDoesYourOrganizationUse", "howArePhysicalAccessDevicesControlledAndManaged", "whatSecurityMeasuresProtectPhysicalAccessDevices", "howFrequentlyAreElectronicAccessSystemsUpdated", "implementationStatus4"];

    let reqFilled = 0;
    const missingReq: Array<keyof PhysicalProtectionLimitPhysicalAccessToInformationSystemsAndFacilities> = [];
    for (const k of req) {
      const v = (this.value as Any)[k];
      if (!rt.isBlank(v)) reqFilled++;
      else missingReq.push(k);
    }

    let totalFilled = 0;
    for (const k of all) {
      if (!rt.isBlank((this.value as Any)[k])) totalFilled++;
    }

    return {
      formTitle: "Physical Protection (Limit physical access to information systems and facilities)",
      requiredCovered: req.length ? reqFilled / req.length : 1,
      totalRequired: req.length,
      totalFilled,
      totalFields: all.length,
      missingRequired: missingReq,
    };
  }
}

/** FYI: No source request **/