/**
 * @file system-communications-protection-monitor-control-and-protect-organizational-communications.auto.ts
 * @generated This file was auto-generated at 2025-08-17T01:27:25.131Z from the FHIR R4 Questionnaire "System & Communications Protection (Monitor, control, and protect organizational communications)".
 * Do not edit this file manually; re-run the generator if the source Questionnaire changes.
 * Profiles: http://hl7.org/fhir/4.0/StructureDefinition/Questionnaire
 *
 * Normalizes LHC JSON and FHIR QuestionnaireResponse into the type-safe `SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunications` interface.
 */

// deno-lint-ignore no-explicit-any
type Any = any;
import {
  coerceBoolean,
  coerceDate,
  coerceNumber,
  coerceOptionalBoolean,
  coerceOptionalDate,
  coerceOptionalNumber,
  coerceOptionalString,
  coerceString,
  findLhcValueByLinkId,
  findQrAnswerByLinkId,
  isBlank,
} from "../r4q-runtime.ts";
/**
 * Form Help (from display/help controls):
 * - Clearly define the limits of your information systems to identify what needs protection and control.
 * - Set up and manage firewalls to control and monitor incoming and outgoing network traffic based on security rules.
 * - Establish continuous monitoring to detect and respond to security events within systems and communications.
 * - Monitor, control, and protect organizational communications (i.e., information transmitted or received by organizational information systems) at the external boundaries and key internal boundaries of the information systems.
 * - Identify and manage system components like web servers, email servers, and public applications that are accessible to external users
 * - Implement measures to separate and segment networks to limit unauthorized access and contain potential security breaches.
 * - Control and restrict communication between networks to prevent unauthorized access and data transfer.
 * - Continuously monitor demilitarized zones (DMZ) and public networks to detect and respond to potential security threats.
 * - Implement subnetworks for publicly accessible system components that are physically or logically separated from internal organizational networks.
 */
/** Map of normalized property names to their source `linkId`. */
export const SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunicationsLinkIds =
  {
    requirementsImplementNetworkMonitoringAndBoundaryProtectionIncludingFirewallsIntrusionDetectionAndCommunicationControls:
      "998940326541",
    implementationStatus: "954433842901",
    doYouHaveANetworkDiagramShowingSystemBoundariesKeyComponentsAndDataFlows:
      "979372224491",
    externalBoundaryComponents: "591770672887",
    keyInternalBoundaryComponents: "930792706809",
    firewallManufacturerModel: "843201435494",
    firewallSoftwareFirmwareVersion: "706452201694",
    defaultDenyPolicyIsImplementedTrafficIsDeniedByDefaultUnlessExplicitlyPermitted:
      "949755108024",
    explicitlyAllowedServicesProtocols: "963088071424",
    explicitlyDeniedServicesProtocols: "122305830447",
    howDoYouMonitorCommunicationsAtSystemBoundaries: "847131102373",
    supportingDocumentation: "794317413983",
    additionalNotes: "782731881405",
    requirementsCreateDmzOrSeparatedNetworkSegmentsForPublicFacingSystemsToIsolateThemFromInternalNetworks:
      "556770566326",
    implementationStatus2: "274150359667",
    whatPubliclyAccessibleSystemComponentsDoesYourOrganizationOperate:
      "956471776047",
    howArePubliclyAccessibleSystemsSeparatedFromInternalNetworks:
      "517448335213",
    whatControlsPreventUnauthorizedAccessFromPublicNetworksToInternalNetworks:
      "634425708590",
    howDoYouMonitorActivityInYourPublicFacingNetworkSegments: "536378863536",
    supportingDocumentation2: "980001173858",
    additionalNotes2: "597392284230",
  } as const;

/** Normalized view of "System & Communications Protection (Monitor, control, and protect organizational communications)" answers. */
export interface SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunications {
  /**
   * Requirements: Implement network monitoring and boundary protection including firewalls, intrusion detection, and communication controls.
   * linkId: 998940326541
   * FHIR type: display
   * Section: SC.L1-3.13.1 - Monitor and control system communications
   * Required: no
   */
  requirementsImplementNetworkMonitoringAndBoundaryProtectionIncludingFirewallsIntrusionDetectionAndCommunicationControls?:
    string;

  /**
   * Implementation Status
   * linkId: 954433842901
   * FHIR type: string
   * Section: SC.L1-3.13.1 - Monitor and control system communications
   * Required: yes
   */
  implementationStatus: string;

  /**
   * Do you have a network diagram showing system boundaries, key components, and data flows?
   * linkId: 979372224491
   * FHIR type: string
   * Section: SC.L1-3.13.1 - Monitor and control system communications
   * Required: no
   */
  doYouHaveANetworkDiagramShowingSystemBoundariesKeyComponentsAndDataFlows?:
    string;

  /**
   * External Boundary Components
   * linkId: 591770672887
   * FHIR type: text
   * Entry format: Include hardware models, firmware versions and their primary functions.  e.g., Cisco ASA 5515-X v9.12.3 - Primary perimeter firewall, Palo Alto PA-220 v10.1.2 - Branch office firewall.
   * Section: SC.L1-3.13.1 - Monitor and control system communications > 1. System Boundary Definition
   * Required: no
   */
  externalBoundaryComponents?: string;

  /**
   * Key Internal Boundary Components
   * linkId: 930792706809
   * FHIR type: text
   * Entry format: Include components that separate development, test and production environments or create internal segmentation. eg., Internal VLAN switches, host-based firewalls,  Network ACLs.
   * Section: SC.L1-3.13.1 - Monitor and control system communications > 1. System Boundary Definition
   * Required: no
   */
  keyInternalBoundaryComponents?: string;

  /**
   * Firewall Manufacturer/Model
   * linkId: 843201435494
   * FHIR type: text
   * Entry format: e.g., Cisco ASA 5500, Palo Alto PA-220
   * Section: SC.L1-3.13.1 - Monitor and control system communications > 2. Firewall Configuration
   * Required: no
   */
  firewallManufacturerModel?: string;

  /**
   * Firewall Software/Firmware Version
   * linkId: 706452201694
   * FHIR type: text
   * Entry format: e.g., v9.12.3
   * Section: SC.L1-3.13.1 - Monitor and control system communications > 2. Firewall Configuration
   * Required: no
   */
  firewallSoftwareFirmwareVersion?: string;

  /**
   * Default deny policy is implemented (traffic is denied by default unless explicitly permitted)
   * linkId: 949755108024
   * FHIR type: choice
   * Section: SC.L1-3.13.1 - Monitor and control system communications > 2. Firewall Configuration
   * Options: "Yes", "No"
   * Required: no
   */
  defaultDenyPolicyIsImplementedTrafficIsDeniedByDefaultUnlessExplicitlyPermitted?:
    | "Yes"
    | "No";

  /**
   * Explicitly Allowed Services/Protocols
   * linkId: 963088071424
   * FHIR type: text
   * Entry format: e.g., HTTPS (TCP/443), SSH (TCP/22), DNS (UDP/53)
   * Section: SC.L1-3.13.1 - Monitor and control system communications > 2. Firewall Configuration
   * Required: no
   */
  explicitlyAllowedServicesProtocols?: string;

  /**
   * Explicitly Denied Services/Protocols
   * linkId: 122305830447
   * FHIR type: text
   * Entry format: e.g., Telnet (TCP/23), FTP (TCP/21), HTTP (TCP/80)
   * Section: SC.L1-3.13.1 - Monitor and control system communications > 2. Firewall Configuration
   * Required: no
   */
  explicitlyDeniedServicesProtocols?: string;

  /**
   * How do you monitor communications at system boundaries?
   * linkId: 847131102373
   * FHIR type: choice
   * Section: SC.L1-3.13.1 - Monitor and control system communications > 3. Monitoring Implementation
   * Options: "Firewall logs and analysis", "Intrusion detection/prevention systems", "Network monitoring tools", "SIEM system integration", "Manual log review"
   * Required: no
   */
  howDoYouMonitorCommunicationsAtSystemBoundaries?:
    | "Firewall logs and analysis"
    | "Intrusion detection/prevention systems"
    | "Network monitoring tools"
    | "SIEM system integration"
    | "Manual log review";

  /**
   * Supporting Documentation
   * linkId: 794317413983
   * FHIR type: text
   * Entry format: eg., Network Security Policy, v2.1, Firewall configuration documentation, Security monitoring procedures.
   * Section: SC.L1-3.13.1 - Monitor and control system communications
   * Required: no
   */
  supportingDocumentation?: string;

  /**
   * Additional Notes
   * linkId: 782731881405
   * FHIR type: text
   * Entry format: Any additional information, challenges or implementation notes
   * Section: SC.L1-3.13.1 - Monitor and control system communications
   * Required: no
   */
  additionalNotes?: string;

  /**
   * Requirements: Create DMZ or separated network segments for public-facing systems to isolate them from internal networks.
   * linkId: 556770566326
   * FHIR type: display
   * Section: SC.L1-3.13.5 - Implement subnetworks for publicly accessible components
   * Required: no
   */
  requirementsCreateDmzOrSeparatedNetworkSegmentsForPublicFacingSystemsToIsolateThemFromInternalNetworks?:
    string;

  /**
   * Implementation Status
   * linkId: 274150359667
   * FHIR type: string
   * Section: SC.L1-3.13.5 - Implement subnetworks for publicly accessible components
   * Required: yes
   */
  implementationStatus2: string;

  /**
   * What publicly accessible system components does your organization operate?
   * linkId: 956471776047
   * FHIR type: string
   * Section: SC.L1-3.13.5 - Implement subnetworks for publicly accessible components > 1. Publicly Accessible System Components
   * Required: no
   */
  whatPubliclyAccessibleSystemComponentsDoesYourOrganizationOperate?: string;

  /**
   * How are publicly accessible systems separated from internal networks?
   * linkId: 517448335213
   * FHIR type: string
   * Section: SC.L1-3.13.5 - Implement subnetworks for publicly accessible components > 2. Network Separation Implementation
   * Required: no
   */
  howArePubliclyAccessibleSystemsSeparatedFromInternalNetworks?: string;

  /**
   * What controls prevent unauthorized access from public networks to internal networks?
   * linkId: 634425708590
   * FHIR type: string
   * Section: SC.L1-3.13.5 - Implement subnetworks for publicly accessible components > 3. Access Control Between Networks
   * Required: no
   */
  whatControlsPreventUnauthorizedAccessFromPublicNetworksToInternalNetworks?:
    string;

  /**
   * How do you monitor activity in your public-facing network segments?
   * linkId: 536378863536
   * FHIR type: string
   * Section: SC.L1-3.13.5 - Implement subnetworks for publicly accessible components > 4. DMZ/Public Network Monitoring
   * Required: no
   */
  howDoYouMonitorActivityInYourPublicFacingNetworkSegments?: string;

  /**
   * Supporting Documentation
   * linkId: 980001173858
   * FHIR type: text
   * Entry format: eg., Network Security Policy, v2.1, Firewall configuration documentation, Security monitoring procedures.
   * Section: SC.L1-3.13.5 - Implement subnetworks for publicly accessible components
   * Required: no
   */
  supportingDocumentation2?: string;

  /**
   * Additional Notes
   * linkId: 597392284230
   * FHIR type: text
   * Entry format: Any additional information, challenges or implementation notes
   * Section: SC.L1-3.13.5 - Implement subnetworks for publicly accessible components
   * Required: no
   */
  additionalNotes2?: string;
}

/** Convert an LHC JSON response into a normalized SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunications object. */
export function systemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunicationsLhcFormResponseAdapter(
  input: Any,
): SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunications {
  return {
    requirementsImplementNetworkMonitoringAndBoundaryProtectionIncludingFirewallsIntrusionDetectionAndCommunicationControls:
      coerceOptionalString(findLhcValueByLinkId(input, "998940326541")),
    implementationStatus: coerceString(
      findLhcValueByLinkId(input, "954433842901"),
    ),
    doYouHaveANetworkDiagramShowingSystemBoundariesKeyComponentsAndDataFlows:
      coerceOptionalString(findLhcValueByLinkId(input, "979372224491")),
    externalBoundaryComponents: coerceOptionalString(
      findLhcValueByLinkId(input, "591770672887"),
    ),
    keyInternalBoundaryComponents: coerceOptionalString(
      findLhcValueByLinkId(input, "930792706809"),
    ),
    firewallManufacturerModel: coerceOptionalString(
      findLhcValueByLinkId(input, "843201435494"),
    ),
    firewallSoftwareFirmwareVersion: coerceOptionalString(
      findLhcValueByLinkId(input, "706452201694"),
    ),
    defaultDenyPolicyIsImplementedTrafficIsDeniedByDefaultUnlessExplicitlyPermitted:
      coerceOptionalString(
        findLhcValueByLinkId(input, "949755108024"),
      ) as SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunications[
        "defaultDenyPolicyIsImplementedTrafficIsDeniedByDefaultUnlessExplicitlyPermitted"
      ],
    explicitlyAllowedServicesProtocols: coerceOptionalString(
      findLhcValueByLinkId(input, "963088071424"),
    ),
    explicitlyDeniedServicesProtocols: coerceOptionalString(
      findLhcValueByLinkId(input, "122305830447"),
    ),
    howDoYouMonitorCommunicationsAtSystemBoundaries: coerceOptionalString(
      findLhcValueByLinkId(input, "847131102373"),
    ) as SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunications[
      "howDoYouMonitorCommunicationsAtSystemBoundaries"
    ],
    supportingDocumentation: coerceOptionalString(
      findLhcValueByLinkId(input, "794317413983"),
    ),
    additionalNotes: coerceOptionalString(
      findLhcValueByLinkId(input, "782731881405"),
    ),
    requirementsCreateDmzOrSeparatedNetworkSegmentsForPublicFacingSystemsToIsolateThemFromInternalNetworks:
      coerceOptionalString(findLhcValueByLinkId(input, "556770566326")),
    implementationStatus2: coerceString(
      findLhcValueByLinkId(input, "274150359667"),
    ),
    whatPubliclyAccessibleSystemComponentsDoesYourOrganizationOperate:
      coerceOptionalString(findLhcValueByLinkId(input, "956471776047")),
    howArePubliclyAccessibleSystemsSeparatedFromInternalNetworks:
      coerceOptionalString(findLhcValueByLinkId(input, "517448335213")),
    whatControlsPreventUnauthorizedAccessFromPublicNetworksToInternalNetworks:
      coerceOptionalString(findLhcValueByLinkId(input, "634425708590")),
    howDoYouMonitorActivityInYourPublicFacingNetworkSegments:
      coerceOptionalString(findLhcValueByLinkId(input, "536378863536")),
    supportingDocumentation2: coerceOptionalString(
      findLhcValueByLinkId(input, "980001173858"),
    ),
    additionalNotes2: coerceOptionalString(
      findLhcValueByLinkId(input, "597392284230"),
    ),
  };
}

/** Convert a FHIR QuestionnaireResponse into a normalized SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunications object. */
export function systemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunicationsFhirQuestionnaireResponseAdapter(
  qr: Any,
): SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunications {
  return {
    requirementsImplementNetworkMonitoringAndBoundaryProtectionIncludingFirewallsIntrusionDetectionAndCommunicationControls:
      coerceOptionalString(findQrAnswerByLinkId(qr, "998940326541")),
    implementationStatus: coerceString(
      findQrAnswerByLinkId(qr, "954433842901"),
    ),
    doYouHaveANetworkDiagramShowingSystemBoundariesKeyComponentsAndDataFlows:
      coerceOptionalString(findQrAnswerByLinkId(qr, "979372224491")),
    externalBoundaryComponents: coerceOptionalString(
      findQrAnswerByLinkId(qr, "591770672887"),
    ),
    keyInternalBoundaryComponents: coerceOptionalString(
      findQrAnswerByLinkId(qr, "930792706809"),
    ),
    firewallManufacturerModel: coerceOptionalString(
      findQrAnswerByLinkId(qr, "843201435494"),
    ),
    firewallSoftwareFirmwareVersion: coerceOptionalString(
      findQrAnswerByLinkId(qr, "706452201694"),
    ),
    defaultDenyPolicyIsImplementedTrafficIsDeniedByDefaultUnlessExplicitlyPermitted:
      coerceOptionalString(
        findQrAnswerByLinkId(qr, "949755108024"),
      ) as SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunications[
        "defaultDenyPolicyIsImplementedTrafficIsDeniedByDefaultUnlessExplicitlyPermitted"
      ],
    explicitlyAllowedServicesProtocols: coerceOptionalString(
      findQrAnswerByLinkId(qr, "963088071424"),
    ),
    explicitlyDeniedServicesProtocols: coerceOptionalString(
      findQrAnswerByLinkId(qr, "122305830447"),
    ),
    howDoYouMonitorCommunicationsAtSystemBoundaries: coerceOptionalString(
      findQrAnswerByLinkId(qr, "847131102373"),
    ) as SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunications[
      "howDoYouMonitorCommunicationsAtSystemBoundaries"
    ],
    supportingDocumentation: coerceOptionalString(
      findQrAnswerByLinkId(qr, "794317413983"),
    ),
    additionalNotes: coerceOptionalString(
      findQrAnswerByLinkId(qr, "782731881405"),
    ),
    requirementsCreateDmzOrSeparatedNetworkSegmentsForPublicFacingSystemsToIsolateThemFromInternalNetworks:
      coerceOptionalString(findQrAnswerByLinkId(qr, "556770566326")),
    implementationStatus2: coerceString(
      findQrAnswerByLinkId(qr, "274150359667"),
    ),
    whatPubliclyAccessibleSystemComponentsDoesYourOrganizationOperate:
      coerceOptionalString(findQrAnswerByLinkId(qr, "956471776047")),
    howArePubliclyAccessibleSystemsSeparatedFromInternalNetworks:
      coerceOptionalString(findQrAnswerByLinkId(qr, "517448335213")),
    whatControlsPreventUnauthorizedAccessFromPublicNetworksToInternalNetworks:
      coerceOptionalString(findQrAnswerByLinkId(qr, "634425708590")),
    howDoYouMonitorActivityInYourPublicFacingNetworkSegments:
      coerceOptionalString(findQrAnswerByLinkId(qr, "536378863536")),
    supportingDocumentation2: coerceOptionalString(
      findQrAnswerByLinkId(qr, "980001173858"),
    ),
    additionalNotes2: coerceOptionalString(
      findQrAnswerByLinkId(qr, "597392284230"),
    ),
  };
}

/** High-level interpreter with factories, validation, and readiness scoring. */
export class SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunicationsInterpreter {
  constructor(
    readonly value:
      SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunications,
  ) {}

  /** Factory: build from LHC JSON. */
  static fromLhcFormResponse(
    input: Any,
  ): SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunicationsInterpreter {
    return new SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunicationsInterpreter(
      systemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunicationsLhcFormResponseAdapter(
        input,
      ),
    );
  }

  /** Factory: build from FHIR QuestionnaireResponse. */
  static fromQuestionnaireResponse(
    qr: Any,
  ): SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunicationsInterpreter {
    return new SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunicationsInterpreter(
      systemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunicationsFhirQuestionnaireResponseAdapter(
        qr,
      ),
    );
  }

  /** Check required fields and report any missing or blank. */
  validateRequiredFields(): {
    ok: boolean;
    missing: Array<
      keyof SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunications
    >;
  } {
    const missing: Array<
      keyof SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunications
    > = [];
    const req: Array<
      keyof SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunications
    > = ["implementationStatus", "implementationStatus2"];
    for (const k of req) {
      const v = (this.value as Any)[k];
      if (isBlank(v)) missing.push(k);
    }
    return { ok: missing.length === 0, missing };
  }

  /**
   * Assess readiness with a simple completeness score. This is meant to be
   * used to help understand how complete the types are and serves as an
   * example of how to use the generated code.
   * - requiredCovered: percentage of required fields that are non-blank
   * - overallFilled: count of non-blank fields among all known properties
   */
  assessReadiness(): {
    formTitle: string;
    requiredCovered: number; // 0..1
    totalRequired: number;
    totalFilled: number;
    totalFields: number;
    missingRequired: Array<
      keyof SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunications
    >;
  } {
    const req: Array<
      keyof SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunications
    > = ["implementationStatus", "implementationStatus2"];
    const all: Array<
      keyof SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunications
    > = [
      "requirementsImplementNetworkMonitoringAndBoundaryProtectionIncludingFirewallsIntrusionDetectionAndCommunicationControls",
      "implementationStatus",
      "doYouHaveANetworkDiagramShowingSystemBoundariesKeyComponentsAndDataFlows",
      "externalBoundaryComponents",
      "keyInternalBoundaryComponents",
      "firewallManufacturerModel",
      "firewallSoftwareFirmwareVersion",
      "defaultDenyPolicyIsImplementedTrafficIsDeniedByDefaultUnlessExplicitlyPermitted",
      "explicitlyAllowedServicesProtocols",
      "explicitlyDeniedServicesProtocols",
      "howDoYouMonitorCommunicationsAtSystemBoundaries",
      "supportingDocumentation",
      "additionalNotes",
      "requirementsCreateDmzOrSeparatedNetworkSegmentsForPublicFacingSystemsToIsolateThemFromInternalNetworks",
      "implementationStatus2",
      "whatPubliclyAccessibleSystemComponentsDoesYourOrganizationOperate",
      "howArePubliclyAccessibleSystemsSeparatedFromInternalNetworks",
      "whatControlsPreventUnauthorizedAccessFromPublicNetworksToInternalNetworks",
      "howDoYouMonitorActivityInYourPublicFacingNetworkSegments",
      "supportingDocumentation2",
      "additionalNotes2",
    ];

    let reqFilled = 0;
    const missingReq: Array<
      keyof SystemCommunicationsProtectionMonitorControlAndProtectOrganizationalCommunications
    > = [];
    for (const k of req) {
      const v = (this.value as Any)[k];
      if (!isBlank(v)) reqFilled++;
      else missingReq.push(k);
    }

    let totalFilled = 0;
    for (const k of all) {
      if (!isBlank((this.value as Any)[k])) totalFilled++;
    }

    return {
      formTitle:
        "System & Communications Protection (Monitor, control, and protect organizational communications)",
      requiredCovered: req.length ? reqFilled / req.length : 1,
      totalRequired: req.length,
      totalFilled,
      totalFields: all.length,
      missingRequired: missingReq,
    };
  }
}
