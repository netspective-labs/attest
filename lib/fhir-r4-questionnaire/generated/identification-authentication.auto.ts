import * as rt from "../r4q-runtime.ts";
/**
 * @file identification-authentication.auto.ts
 * @generated This file was auto-generated from the FHIR R4 Questionnaire "Identification & Authentication".
 * Do not edit this file manually; re-run the generator if the source Questionnaire changes.
 * Profiles: http://hl7.org/fhir/4.0/StructureDefinition/Questionnaire
 *
 * Normalizes LHC JSON and FHIR QuestionnaireResponse into the type-safe `IdentificationAuthentication` interface.
 */

// this is the module signature, used by importers to identify the module
// using r4q-runtime.ts `moduleSignature` function
export const identificationAuthenticationModuleSignature: rt.ModuleSignature = {
  title: "Identification & Authentication",
  filename: "identification-authentication.auto.ts",
  titleCamel: "`identificationAuthentication`",
  titlePascal: "`IdentificationAuthentication`",
  titleKebab: "`identification-authentication`",
  lhcFormResponseAdapterFnName:
    "identificationAuthenticationLhcFormResponseAdapter",
  fhirQuestionnaireResponseAdapterFnName:
    "identificationAuthenticationFhirQuestionnaireResponseAdapter",
  sourceTextConstName: "identificationAuthenticationSource",
};

// deno-lint-ignore no-explicit-any
type Any = any;
/** Map of normalized property names to their source `linkId`. */
export const identificationAuthenticationLinkIds = {
  identificationAuthenticationIdentificationSectionNotes: "608483664601",
  identificationAuthenticationStatusUniqueIds: "362061549890",
  identificationAuthenticationEmployeeLoginIdFormat: "139461602895",
  identificationAuthenticationNumberOfServiceAccounts: "179545641231",
  checkAllThatApply: "753553198622",
  identificationAuthenticationServiceAccountManagementNotes: "441172825241",
  identificationAuthenticationCompanyDeviceInventoryList: "926744954268",
  identificationAuthenticationUserIdentityVerificationProcess: "297397401977",
  identificationAuthenticationUserIdentityVerificationNotes: "627017348272",
  identificationAuthenticationDeviceCountWorkstations: "878410531769",
  identificationAuthenticationDeviceCountServers: "361034048943",
  identificationAuthenticationDeviceCountMobile: "424090205463",
  identificationAuthenticationDeviceCountNetwork: "764441913827",
  identificationAuthenticationDeviceIdentificationMethods: "359160217347",
  identificationAuthenticationDeviceIdentificationMethodsNotes: "346437919917",
  identificationAuthenticationIdentificationSupportingDocs: "157280172274",
  identificationAuthenticationIdentificationAdditionalNotes: "382279609009",
  identificationAuthenticationStatusAuthenticationControls: "676336695824",
  identificationAuthenticationUserAuthenticationMethods: "901079756471",
  identificationAuthenticationUserAuthenticationMethodsNotes: "115035657570",
  identificationAuthenticationPasswordMinLength: "444552965098",
  identificationAuthenticationPasswordExpirationDays: "499668919305",
  identificationAuthenticationPasswordHistoryCount: "190124104069",
  clickAllThatApply: "404025003688",
  identificationAuthenticationPasswordRequirementsNotes: "149539043632",
  identificationAuthenticationMfaUsage: "928879235030",
  identificationAuthenticationDefaultCredentialHandling: "830887074055",
  identificationAuthenticationFailedAttemptsLockout: "647413778355",
  identificationAuthenticationAccountLockoutDuration: "552155632772",
  clickAllThatApply2: "947716241721",
  identificationAuthenticationAuthenticationFailureHandlingNotes:
    "434988961472",
  identificationAuthenticationAuthenticationSupportingDocs: "230111377333",
  identificationAuthenticationAuthenticationAdditionalNotes: "939036015644",
} as const;

/** Normalized view of "Identification & Authentication" answers. */
export interface IdentificationAuthentication {
  /**
   * Notes / Evidence
   * linkId: 608483664601
   * FHIR type: text
   * Entry format: Enter notes or supporting evidence, if any
   * Section: IA.L1-B.1.V - Identification
   * Required: no
   */
  identificationAuthenticationIdentificationSectionNotes?: string;

  /**
   * What is the status of making sure all employees, devices, and automated tools that use your systems have unique IDs so you can tell them apart?
   * linkId: 362061549890
   * FHIR type: choice
   * Section: IA.L1-B.1.V - Identification
   * Options: "Fully implemented – Every employee has their own login, devices are uniquely identified, and automated tools are tracked.", "Partially implemented – Most users/devices have unique IDs, but some accounts are still shared or not clearly identified.", "Not implemented – Users or devices share accounts, or there is no way to uniquely identify who/what is accessing systems."
   * Required: no
   */
  identificationAuthenticationStatusUniqueIds?:
    | "Fully implemented – Every employee has their own login, devices are uniquely identified, and automated tools are tracked."
    | "Partially implemented – Most users/devices have unique IDs, but some accounts are still shared or not clearly identified."
    | "Not implemented – Users or devices share accounts, or there is no way to uniquely identify who/what is accessing systems.";

  /**
   * What format do you use to create employee login IDs?
   * linkId: 139461602895
   * FHIR type: choice
   * Section: IA.L1-B.1.V - Identification
   * Options: " First name + last name (john.smith)", " First initial + last name (jsmith)", " Employee ID numbers (EMP001234)", " Department codes + names (IT-jsmith)"
   * Required: no
   */
  identificationAuthenticationEmployeeLoginIdFormat?:
    | " First name + last name (john.smith)"
    | " First initial + last name (jsmith)"
    | " Employee ID numbers (EMP001234)"
    | " Department codes + names (IT-jsmith)";

  /**
   * Number of service accounts (special logins used by software or automated tools, not people):
   * linkId: 179545641231
   * FHIR type: integer
   * Entry format: Enter number
   * Section: IA.L1-B.1.V - Identification > Service Account Management
   * Required: no
   */
  identificationAuthenticationNumberOfServiceAccounts?: number;

  /**
   * Check all that apply:
   * linkId: 753553198622
   * FHIR type: choice
   * Section: IA.L1-B.1.V - Identification > Service Account Management
   * Options: " Database services", " Web applications", " Backup processes", " Monitoring/logging services", "Security scanning tools"
   * Required: no
   */
  checkAllThatApply?: (
    | " Database services"
    | " Web applications"
    | " Backup processes"
    | " Monitoring/logging services"
    | "Security scanning tools"
  )[];

  /**
   * Notes / Evidence
   * linkId: 441172825241
   * FHIR type: text
   * Entry format: Enter notes or supporting evidence, if any
   * Section: IA.L1-B.1.V - Identification > Service Account Management
   * Required: no
   */
  identificationAuthenticationServiceAccountManagementNotes?: string;

  /**
   * Do you keep a list or spreadsheet of all company devices (computers, phones, servers, etc.) that connect to your systems?
   * linkId: 926744954268
   * FHIR type: choice
   * Section: IA.L1-B.1.V - Identification > Service Account Management
   * Options: "Yes", "No"
   * Required: no
   */
  identificationAuthenticationCompanyDeviceInventoryList?: "Yes" | "No";

  /**
   * How do you verify a person’s identity before giving them access to company systems?
   * linkId: 297397401977
   * FHIR type: choice
   * Section: IA.L1-B.1.V - Identification > Service Account Management
   * Options: "HR verification with employee records", "Manager approval with written authorization", "Background check completion", "Photo identification verification"
   * Required: no
   */
  identificationAuthenticationUserIdentityVerificationProcess?: (
    | "HR verification with employee records"
    | "Manager approval with written authorization"
    | "Background check completion"
    | "Photo identification verification"
  )[];

  /**
   * Notes / Evidence
   * linkId: 627017348272
   * FHIR type: text
   * Entry format: Enter notes or supporting evidence, if any
   * Section: IA.L1-B.1.V - Identification > Service Account Management
   * Required: no
   */
  identificationAuthenticationUserIdentityVerificationNotes?: string;

  /**
   * Workstations/laptops:
   * linkId: 878410531769
   * FHIR type: integer
   * Section: IA.L1-B.1.V - Identification > Device Inventory
   * Required: no
   */
  identificationAuthenticationDeviceCountWorkstations?: number;

  /**
   * Servers:
   * linkId: 361034048943
   * FHIR type: integer
   * Section: IA.L1-B.1.V - Identification > Device Inventory
   * Required: no
   */
  identificationAuthenticationDeviceCountServers?: number;

  /**
   * Mobile devices:
   * linkId: 424090205463
   * FHIR type: integer
   * Section: IA.L1-B.1.V - Identification > Device Inventory
   * Required: no
   */
  identificationAuthenticationDeviceCountMobile?: number;

  /**
   * Network devices:
   * linkId: 764441913827
   * FHIR type: integer
   * Section: IA.L1-B.1.V - Identification > Device Inventory
   * Required: no
   */
  identificationAuthenticationDeviceCountNetwork?: number;

  /**
   * Every computer, phone, or server should have a unique identifier so you know exactly which device is connecting. How do you uniquely identify each device that connects to your systems?
   * linkId: 359160217347
   * FHIR type: choice
   * Section: IA.L1-B.1.V - Identification
   * Options: "MAC addresses", "IP addresses (static)", "Computer/device names", "Asset tag numbers", "Serial numbers", "Certificates/digital signatures"
   * Required: no
   */
  identificationAuthenticationDeviceIdentificationMethods?: (
    | "MAC addresses"
    | "IP addresses (static)"
    | "Computer/device names"
    | "Asset tag numbers"
    | "Serial numbers"
    | "Certificates/digital signatures"
  )[];

  /**
   * Notes / Evidence
   * linkId: 346437919917
   * FHIR type: text
   * Entry format: Enter notes or supporting evidence, if any
   * Section: IA.L1-B.1.V - Identification
   * Required: no
   */
  identificationAuthenticationDeviceIdentificationMethodsNotes?: string;

  /**
   * Supporting Documentation
   * linkId: 157280172274
   * FHIR type: choice
   * Section: IA.L1-B.1.V - Identification
   * Options: "Yes", "No"
   * Required: no
   */
  identificationAuthenticationIdentificationSupportingDocs?: "Yes" | "No";

  /**
   * Additional Notes
   * linkId: 382279609009
   * FHIR type: text
   * Entry format: Any additional notes, remediation plans, or implementation challenges...
   * Section: IA.L1-B.1.V - Identification
   * Required: no
   */
  identificationAuthenticationIdentificationAdditionalNotes?: string;

  /**
   * What is the current status of the controls that verify that users and devices are who they say they are before giving them access?
   * linkId: 676336695824
   * FHIR type: choice
   * Section: IA.L1-B.1.VI - Authentication
   * Options: "Fully implemented – Every user has a unique login and password (no shared accounts), default passwords are replaced, and all devices are authenticated before access.", "Partially implemented – Most users and devices are verified, but some shared or default accounts/devices are still in use.", "Not Implemented", "Not applicable – No systems in scope store or process FCI."
   * Required: no
   */
  identificationAuthenticationStatusAuthenticationControls?:
    | "Fully implemented – Every user has a unique login and password (no shared accounts), default passwords are replaced, and all devices are authenticated before access."
    | "Partially implemented – Most users and devices are verified, but some shared or default accounts/devices are still in use."
    | "Not Implemented"
    | "Not applicable – No systems in scope store or process FCI.";

  /**
   * What methods do you use to confirm a user’s identity before they can log in?
   * linkId: 901079756471
   * FHIR type: choice
   * Section: IA.L1-B.1.VI - Authentication
   * Options: "Username and password – The most common method; each employee has a unique login and password.", "Multi-factor authentication (MFA) – Requires two or more proofs, such as a password plus a code texted to your phone.", "Smart cards / PIV cards – Physical cards employees insert or tap to log in.", "Biometric authentication – Uses fingerprints, facial recognition, or other personal traits.", "Digital certificates – Software-based “ID cards” that prove a device or user is trusted.", "Single sign-on (SSO) – One secure login gives access to multiple company applications."
   * Required: no
   */
  identificationAuthenticationUserAuthenticationMethods?: (
    | "Username and password – The most common method; each employee has a unique login and password."
    | "Multi-factor authentication (MFA) – Requires two or more proofs, such as a password plus a code texted to your phone."
    | "Smart cards / PIV cards – Physical cards employees insert or tap to log in."
    | "Biometric authentication – Uses fingerprints, facial recognition, or other personal traits."
    | "Digital certificates – Software-based “ID cards” that prove a device or user is trusted."
    | "Single sign-on (SSO) – One secure login gives access to multiple company applications."
  )[];

  /**
   * Notes / Evidence
   * linkId: 115035657570
   * FHIR type: text
   * Entry format: Enter notes or supporting evidence, if any
   * Section: IA.L1-B.1.VI - Authentication
   * Required: no
   */
  identificationAuthenticationUserAuthenticationMethodsNotes?: string;

  /**
   * Minimum length (characters):
   * linkId: 444552965098
   * FHIR type: integer
   * Entry format: 8
   * Section: IA.L1-B.1.VI - Authentication > Password Requirements
   * Required: no
   */
  identificationAuthenticationPasswordMinLength?: number;

  /**
   * Password expiration (days):
   * linkId: 499668919305
   * FHIR type: integer
   * Entry format: 90
   * Section: IA.L1-B.1.VI - Authentication > Password Requirements
   * Required: no
   */
  identificationAuthenticationPasswordExpirationDays?: number;

  /**
   * Password history (passwords remembered):
   * linkId: 190124104069
   * FHIR type: integer
   * Entry format: 5
   * Section: IA.L1-B.1.VI - Authentication > Password Requirements
   * Required: no
   */
  identificationAuthenticationPasswordHistoryCount?: number;

  /**
   * Click all that apply:
   * linkId: 404025003688
   * FHIR type: choice
   * Section: IA.L1-B.1.VI - Authentication > Password Requirements
   * Options: "Uppercase letters required", "Lowercase letters required", "Numbers required", "Special characters required"
   * Required: no
   */
  clickAllThatApply?: (
    | "Uppercase letters required"
    | "Lowercase letters required"
    | "Numbers required"
    | "Special characters required"
  )[];

  /**
   * Notes / Evidence
   * linkId: 149539043632
   * FHIR type: text
   * Entry format: Enter notes or supporting evidence, if any
   * Section: IA.L1-B.1.VI - Authentication > Password Requirements
   * Required: no
   */
  identificationAuthenticationPasswordRequirementsNotes?: string;

  /**
   * Multi-factor authentication (MFA) means using more than one proof of identity before someone can log in. For example, a password plus a code texted to your phone, or a password plus a fingerprint scan. Do you use MFA?
   * linkId: 928879235030
   * FHIR type: choice
   * Section: IA.L1-B.1.VI - Authentication
   * Options: "Yes, for all users and systems", "Yes, for privileged accounts only", "Yes, for remote access only", "Yes, for critical systems only", "No, not implemented"
   * Required: no
   */
  identificationAuthenticationMfaUsage?:
    | "Yes, for all users and systems"
    | "Yes, for privileged accounts only"
    | "Yes, for remote access only"
    | "Yes, for critical systems only"
    | "No, not implemented";

  /**
   * How do you handle default usernames and passwords that come with new systems or software?
   * linkId: 830887074055
   * FHIR type: choice
   * Section: IA.L1-B.1.VI - Authentication
   * Options: "Always changed before deployment – IT changes default logins before the system is ever used.", "Changed during initial configuration – Defaults are replaced when the system is set up, but not necessarily before deployment.", "Users required to change on first login – The system forces a password change the first time someone logs in.", "No formal process – Default credentials may remain in place, creating a serious security risk."
   * Required: no
   */
  identificationAuthenticationDefaultCredentialHandling?:
    | "Always changed before deployment – IT changes default logins before the system is ever used."
    | "Changed during initial configuration – Defaults are replaced when the system is set up, but not necessarily before deployment."
    | "Users required to change on first login – The system forces a password change the first time someone logs in."
    | "No formal process – Default credentials may remain in place, creating a serious security risk.";

  /**
   * Number of failed attempts before lockout:
   * linkId: 647413778355
   * FHIR type: integer
   * Entry format: 3
   * Section: IA.L1-B.1.VI - Authentication > Authentication Failure Handling
   * Required: no
   */
  identificationAuthenticationFailedAttemptsLockout?: number;

  /**
   * Account lockout duration (minutes):
   * linkId: 552155632772
   * FHIR type: integer
   * Entry format: 30
   * Section: IA.L1-B.1.VI - Authentication > Authentication Failure Handling
   * Required: no
   */
  identificationAuthenticationAccountLockoutDuration?: number;

  /**
   * Click all that apply:
   * linkId: 947716241721
   * FHIR type: choice
   * Section: IA.L1-B.1.VI - Authentication > Authentication Failure Handling
   * Options: "Administrator notification sent", " Security team alerted", "Logged for review"
   * Required: no
   */
  clickAllThatApply2?: (
    | "Administrator notification sent"
    | " Security team alerted"
    | "Logged for review"
  )[];

  /**
   * Notes / Evidence
   * linkId: 434988961472
   * FHIR type: text
   * Entry format: Enter notes or supporting evidence, if any
   * Section: IA.L1-B.1.VI - Authentication > Authentication Failure Handling
   * Required: no
   */
  identificationAuthenticationAuthenticationFailureHandlingNotes?: string;

  /**
   * Supporting Documentation
   * linkId: 230111377333
   * FHIR type: choice
   * Section: IA.L1-B.1.VI - Authentication
   * Options: "Yes", "No"
   * Required: no
   */
  identificationAuthenticationAuthenticationSupportingDocs?: "Yes" | "No";

  /**
   * Additional Notes
   * linkId: 939036015644
   * FHIR type: text
   * Entry format: Any additional notes, remediation plans, or implementation challenges...
   * Section: IA.L1-B.1.VI - Authentication
   * Required: no
   */
  identificationAuthenticationAuthenticationAdditionalNotes?: string;
}

/** Convert an LHC JSON response into a normalized IdentificationAuthentication object. */
export function identificationAuthenticationLhcFormResponseAdapter(
  input: Any,
): IdentificationAuthentication {
  return {
    identificationAuthenticationIdentificationSectionNotes: rt
      .coerceOptionalString(rt.findLhcValueByLinkId(input, "608483664601")),
    identificationAuthenticationStatusUniqueIds: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "362061549890"),
    ) as IdentificationAuthentication[
      "identificationAuthenticationStatusUniqueIds"
    ],
    identificationAuthenticationEmployeeLoginIdFormat: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "139461602895"),
    ) as IdentificationAuthentication[
      "identificationAuthenticationEmployeeLoginIdFormat"
    ],
    identificationAuthenticationNumberOfServiceAccounts: rt
      .coerceOptionalNumber(rt.findLhcValueByLinkId(input, "179545641231")),
    checkAllThatApply: rt.coerceOptionalStringArray(
      rt.findLhcValueByLinkId(input, "753553198622"),
    ) as IdentificationAuthentication["checkAllThatApply"],
    identificationAuthenticationServiceAccountManagementNotes: rt
      .coerceOptionalString(rt.findLhcValueByLinkId(input, "441172825241")),
    identificationAuthenticationCompanyDeviceInventoryList: rt
      .coerceOptionalString(
        rt.findLhcValueByLinkId(input, "926744954268"),
      ) as IdentificationAuthentication[
        "identificationAuthenticationCompanyDeviceInventoryList"
      ],
    identificationAuthenticationUserIdentityVerificationProcess: rt
      .coerceOptionalStringArray(
        rt.findLhcValueByLinkId(input, "297397401977"),
      ) as IdentificationAuthentication[
        "identificationAuthenticationUserIdentityVerificationProcess"
      ],
    identificationAuthenticationUserIdentityVerificationNotes: rt
      .coerceOptionalString(rt.findLhcValueByLinkId(input, "627017348272")),
    identificationAuthenticationDeviceCountWorkstations: rt
      .coerceOptionalNumber(rt.findLhcValueByLinkId(input, "878410531769")),
    identificationAuthenticationDeviceCountServers: rt.coerceOptionalNumber(
      rt.findLhcValueByLinkId(input, "361034048943"),
    ),
    identificationAuthenticationDeviceCountMobile: rt.coerceOptionalNumber(
      rt.findLhcValueByLinkId(input, "424090205463"),
    ),
    identificationAuthenticationDeviceCountNetwork: rt.coerceOptionalNumber(
      rt.findLhcValueByLinkId(input, "764441913827"),
    ),
    identificationAuthenticationDeviceIdentificationMethods: rt
      .coerceOptionalStringArray(
        rt.findLhcValueByLinkId(input, "359160217347"),
      ) as IdentificationAuthentication[
        "identificationAuthenticationDeviceIdentificationMethods"
      ],
    identificationAuthenticationDeviceIdentificationMethodsNotes: rt
      .coerceOptionalString(rt.findLhcValueByLinkId(input, "346437919917")),
    identificationAuthenticationIdentificationSupportingDocs: rt
      .coerceOptionalString(
        rt.findLhcValueByLinkId(input, "157280172274"),
      ) as IdentificationAuthentication[
        "identificationAuthenticationIdentificationSupportingDocs"
      ],
    identificationAuthenticationIdentificationAdditionalNotes: rt
      .coerceOptionalString(rt.findLhcValueByLinkId(input, "382279609009")),
    identificationAuthenticationStatusAuthenticationControls: rt
      .coerceOptionalString(
        rt.findLhcValueByLinkId(input, "676336695824"),
      ) as IdentificationAuthentication[
        "identificationAuthenticationStatusAuthenticationControls"
      ],
    identificationAuthenticationUserAuthenticationMethods: rt
      .coerceOptionalStringArray(
        rt.findLhcValueByLinkId(input, "901079756471"),
      ) as IdentificationAuthentication[
        "identificationAuthenticationUserAuthenticationMethods"
      ],
    identificationAuthenticationUserAuthenticationMethodsNotes: rt
      .coerceOptionalString(rt.findLhcValueByLinkId(input, "115035657570")),
    identificationAuthenticationPasswordMinLength: rt.coerceOptionalNumber(
      rt.findLhcValueByLinkId(input, "444552965098"),
    ),
    identificationAuthenticationPasswordExpirationDays: rt.coerceOptionalNumber(
      rt.findLhcValueByLinkId(input, "499668919305"),
    ),
    identificationAuthenticationPasswordHistoryCount: rt.coerceOptionalNumber(
      rt.findLhcValueByLinkId(input, "190124104069"),
    ),
    clickAllThatApply: rt.coerceOptionalStringArray(
      rt.findLhcValueByLinkId(input, "404025003688"),
    ) as IdentificationAuthentication["clickAllThatApply"],
    identificationAuthenticationPasswordRequirementsNotes: rt
      .coerceOptionalString(rt.findLhcValueByLinkId(input, "149539043632")),
    identificationAuthenticationMfaUsage: rt.coerceOptionalString(
      rt.findLhcValueByLinkId(input, "928879235030"),
    ) as IdentificationAuthentication["identificationAuthenticationMfaUsage"],
    identificationAuthenticationDefaultCredentialHandling: rt
      .coerceOptionalString(
        rt.findLhcValueByLinkId(input, "830887074055"),
      ) as IdentificationAuthentication[
        "identificationAuthenticationDefaultCredentialHandling"
      ],
    identificationAuthenticationFailedAttemptsLockout: rt.coerceOptionalNumber(
      rt.findLhcValueByLinkId(input, "647413778355"),
    ),
    identificationAuthenticationAccountLockoutDuration: rt.coerceOptionalNumber(
      rt.findLhcValueByLinkId(input, "552155632772"),
    ),
    clickAllThatApply2: rt.coerceOptionalStringArray(
      rt.findLhcValueByLinkId(input, "947716241721"),
    ) as IdentificationAuthentication["clickAllThatApply2"],
    identificationAuthenticationAuthenticationFailureHandlingNotes: rt
      .coerceOptionalString(rt.findLhcValueByLinkId(input, "434988961472")),
    identificationAuthenticationAuthenticationSupportingDocs: rt
      .coerceOptionalString(
        rt.findLhcValueByLinkId(input, "230111377333"),
      ) as IdentificationAuthentication[
        "identificationAuthenticationAuthenticationSupportingDocs"
      ],
    identificationAuthenticationAuthenticationAdditionalNotes: rt
      .coerceOptionalString(rt.findLhcValueByLinkId(input, "939036015644")),
  };
}

/** Convert a FHIR QuestionnaireResponse into a normalized IdentificationAuthentication object. */
export function identificationAuthenticationFhirQuestionnaireResponseAdapter(
  qr: Any,
): IdentificationAuthentication {
  return {
    identificationAuthenticationIdentificationSectionNotes: rt
      .coerceOptionalString(rt.findQrAnswerByLinkId(qr, "608483664601")),
    identificationAuthenticationStatusUniqueIds: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "362061549890"),
    ) as IdentificationAuthentication[
      "identificationAuthenticationStatusUniqueIds"
    ],
    identificationAuthenticationEmployeeLoginIdFormat: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "139461602895"),
    ) as IdentificationAuthentication[
      "identificationAuthenticationEmployeeLoginIdFormat"
    ],
    identificationAuthenticationNumberOfServiceAccounts: rt
      .coerceOptionalNumber(rt.findQrAnswerByLinkId(qr, "179545641231")),
    checkAllThatApply: rt.coerceOptionalStringArray(
      rt.findQrAnswersByLinkId(qr, "753553198622"),
    ) as IdentificationAuthentication["checkAllThatApply"],
    identificationAuthenticationServiceAccountManagementNotes: rt
      .coerceOptionalString(rt.findQrAnswerByLinkId(qr, "441172825241")),
    identificationAuthenticationCompanyDeviceInventoryList: rt
      .coerceOptionalString(
        rt.findQrAnswerByLinkId(qr, "926744954268"),
      ) as IdentificationAuthentication[
        "identificationAuthenticationCompanyDeviceInventoryList"
      ],
    identificationAuthenticationUserIdentityVerificationProcess: rt
      .coerceOptionalStringArray(
        rt.findQrAnswersByLinkId(qr, "297397401977"),
      ) as IdentificationAuthentication[
        "identificationAuthenticationUserIdentityVerificationProcess"
      ],
    identificationAuthenticationUserIdentityVerificationNotes: rt
      .coerceOptionalString(rt.findQrAnswerByLinkId(qr, "627017348272")),
    identificationAuthenticationDeviceCountWorkstations: rt
      .coerceOptionalNumber(rt.findQrAnswerByLinkId(qr, "878410531769")),
    identificationAuthenticationDeviceCountServers: rt.coerceOptionalNumber(
      rt.findQrAnswerByLinkId(qr, "361034048943"),
    ),
    identificationAuthenticationDeviceCountMobile: rt.coerceOptionalNumber(
      rt.findQrAnswerByLinkId(qr, "424090205463"),
    ),
    identificationAuthenticationDeviceCountNetwork: rt.coerceOptionalNumber(
      rt.findQrAnswerByLinkId(qr, "764441913827"),
    ),
    identificationAuthenticationDeviceIdentificationMethods: rt
      .coerceOptionalStringArray(
        rt.findQrAnswersByLinkId(qr, "359160217347"),
      ) as IdentificationAuthentication[
        "identificationAuthenticationDeviceIdentificationMethods"
      ],
    identificationAuthenticationDeviceIdentificationMethodsNotes: rt
      .coerceOptionalString(rt.findQrAnswerByLinkId(qr, "346437919917")),
    identificationAuthenticationIdentificationSupportingDocs: rt
      .coerceOptionalString(
        rt.findQrAnswerByLinkId(qr, "157280172274"),
      ) as IdentificationAuthentication[
        "identificationAuthenticationIdentificationSupportingDocs"
      ],
    identificationAuthenticationIdentificationAdditionalNotes: rt
      .coerceOptionalString(rt.findQrAnswerByLinkId(qr, "382279609009")),
    identificationAuthenticationStatusAuthenticationControls: rt
      .coerceOptionalString(
        rt.findQrAnswerByLinkId(qr, "676336695824"),
      ) as IdentificationAuthentication[
        "identificationAuthenticationStatusAuthenticationControls"
      ],
    identificationAuthenticationUserAuthenticationMethods: rt
      .coerceOptionalStringArray(
        rt.findQrAnswersByLinkId(qr, "901079756471"),
      ) as IdentificationAuthentication[
        "identificationAuthenticationUserAuthenticationMethods"
      ],
    identificationAuthenticationUserAuthenticationMethodsNotes: rt
      .coerceOptionalString(rt.findQrAnswerByLinkId(qr, "115035657570")),
    identificationAuthenticationPasswordMinLength: rt.coerceOptionalNumber(
      rt.findQrAnswerByLinkId(qr, "444552965098"),
    ),
    identificationAuthenticationPasswordExpirationDays: rt.coerceOptionalNumber(
      rt.findQrAnswerByLinkId(qr, "499668919305"),
    ),
    identificationAuthenticationPasswordHistoryCount: rt.coerceOptionalNumber(
      rt.findQrAnswerByLinkId(qr, "190124104069"),
    ),
    clickAllThatApply: rt.coerceOptionalStringArray(
      rt.findQrAnswersByLinkId(qr, "404025003688"),
    ) as IdentificationAuthentication["clickAllThatApply"],
    identificationAuthenticationPasswordRequirementsNotes: rt
      .coerceOptionalString(rt.findQrAnswerByLinkId(qr, "149539043632")),
    identificationAuthenticationMfaUsage: rt.coerceOptionalString(
      rt.findQrAnswerByLinkId(qr, "928879235030"),
    ) as IdentificationAuthentication["identificationAuthenticationMfaUsage"],
    identificationAuthenticationDefaultCredentialHandling: rt
      .coerceOptionalString(
        rt.findQrAnswerByLinkId(qr, "830887074055"),
      ) as IdentificationAuthentication[
        "identificationAuthenticationDefaultCredentialHandling"
      ],
    identificationAuthenticationFailedAttemptsLockout: rt.coerceOptionalNumber(
      rt.findQrAnswerByLinkId(qr, "647413778355"),
    ),
    identificationAuthenticationAccountLockoutDuration: rt.coerceOptionalNumber(
      rt.findQrAnswerByLinkId(qr, "552155632772"),
    ),
    clickAllThatApply2: rt.coerceOptionalStringArray(
      rt.findQrAnswersByLinkId(qr, "947716241721"),
    ) as IdentificationAuthentication["clickAllThatApply2"],
    identificationAuthenticationAuthenticationFailureHandlingNotes: rt
      .coerceOptionalString(rt.findQrAnswerByLinkId(qr, "434988961472")),
    identificationAuthenticationAuthenticationSupportingDocs: rt
      .coerceOptionalString(
        rt.findQrAnswerByLinkId(qr, "230111377333"),
      ) as IdentificationAuthentication[
        "identificationAuthenticationAuthenticationSupportingDocs"
      ],
    identificationAuthenticationAuthenticationAdditionalNotes: rt
      .coerceOptionalString(rt.findQrAnswerByLinkId(qr, "939036015644")),
  };
}

/**
 * NOTE TO DEVELOPERS:
 * -------------------
 * This Interpreter class is provided only as an EXAMPLE scaffold to demonstrate
 * how to consume the normalized type-safe interface generated for this
 * Questionnaire. It shows minimal factories (`fromLhc`, `fromQuestionnaireResponse`)
 * and convenience methods (`validateRequiredFields`, `assessReadiness`) but it is
 * NOT intended for production use.
 *
 * In real applications:
 * - Treat this class as SAMPLE CODE only.
 * - Replace or extend it with proper business logic, rules engines, or validation
 *   frameworks appropriate to your domain.
 * - Do not rely on the simplistic readiness scoring or validation in production
 *   scenarios; they are illustrative, not authoritative.
 *
 * Best practice: use the generated TypeScript interface (`IdentificationAuthentication`) as your
 * contract for normalized data, then integrate with your own rules processors,
 * compliance engines, or plain TypeScript/JavaScript functions as needed.
 */
export class IdentificationAuthenticationInterpreter {
  constructor(readonly value: IdentificationAuthentication) {}

  /** Factory: build from LHC JSON. */
  static fromLhcFormResponse(
    input: Any,
  ): IdentificationAuthenticationInterpreter {
    return new IdentificationAuthenticationInterpreter(
      identificationAuthenticationLhcFormResponseAdapter(input),
    );
  }

  /** Factory: build from FHIR QuestionnaireResponse. */
  static fromQuestionnaireResponse(
    qr: Any,
  ): IdentificationAuthenticationInterpreter {
    return new IdentificationAuthenticationInterpreter(
      identificationAuthenticationFhirQuestionnaireResponseAdapter(qr),
    );
  }

  /** Check required fields and report any missing or blank. */
  validateRequiredFields(): {
    ok: boolean;
    missing: Array<keyof IdentificationAuthentication>;
  } {
    const missing: Array<keyof IdentificationAuthentication> = [];
    const req: Array<keyof IdentificationAuthentication> = [];
    for (const k of req) {
      const v = (this.value as Any)[k];
      if (rt.isBlank(v)) missing.push(k);
    }
    return { ok: missing.length === 0, missing };
  }

  /**
   * Assess readiness with a simple completeness score. This is meant to be
   * used to help understand how complete the types are and serves as an
   * example of how to use the generated code.
   * - requiredCovered: percentage of required fields that are non-blank
   * - overallFilled: count of non-blank fields among all known properties
   */
  assessReadiness(): {
    formTitle: string;
    requiredCovered: number; // 0..1
    totalRequired: number;
    totalFilled: number;
    totalFields: number;
    missingRequired: Array<keyof IdentificationAuthentication>;
  } {
    const req: Array<keyof IdentificationAuthentication> = [];
    const all: Array<keyof IdentificationAuthentication> = [
      "identificationAuthenticationIdentificationSectionNotes",
      "identificationAuthenticationStatusUniqueIds",
      "identificationAuthenticationEmployeeLoginIdFormat",
      "identificationAuthenticationNumberOfServiceAccounts",
      "checkAllThatApply",
      "identificationAuthenticationServiceAccountManagementNotes",
      "identificationAuthenticationCompanyDeviceInventoryList",
      "identificationAuthenticationUserIdentityVerificationProcess",
      "identificationAuthenticationUserIdentityVerificationNotes",
      "identificationAuthenticationDeviceCountWorkstations",
      "identificationAuthenticationDeviceCountServers",
      "identificationAuthenticationDeviceCountMobile",
      "identificationAuthenticationDeviceCountNetwork",
      "identificationAuthenticationDeviceIdentificationMethods",
      "identificationAuthenticationDeviceIdentificationMethodsNotes",
      "identificationAuthenticationIdentificationSupportingDocs",
      "identificationAuthenticationIdentificationAdditionalNotes",
      "identificationAuthenticationStatusAuthenticationControls",
      "identificationAuthenticationUserAuthenticationMethods",
      "identificationAuthenticationUserAuthenticationMethodsNotes",
      "identificationAuthenticationPasswordMinLength",
      "identificationAuthenticationPasswordExpirationDays",
      "identificationAuthenticationPasswordHistoryCount",
      "clickAllThatApply",
      "identificationAuthenticationPasswordRequirementsNotes",
      "identificationAuthenticationMfaUsage",
      "identificationAuthenticationDefaultCredentialHandling",
      "identificationAuthenticationFailedAttemptsLockout",
      "identificationAuthenticationAccountLockoutDuration",
      "clickAllThatApply2",
      "identificationAuthenticationAuthenticationFailureHandlingNotes",
      "identificationAuthenticationAuthenticationSupportingDocs",
      "identificationAuthenticationAuthenticationAdditionalNotes",
    ];

    let reqFilled = 0;
    const missingReq: Array<keyof IdentificationAuthentication> = [];
    for (const k of req) {
      const v = (this.value as Any)[k];
      if (!rt.isBlank(v)) reqFilled++;
      else missingReq.push(k);
    }

    let totalFilled = 0;
    for (const k of all) {
      if (!rt.isBlank((this.value as Any)[k])) totalFilled++;
    }

    return {
      formTitle: "Identification & Authentication",
      requiredCovered: req.length ? reqFilled / req.length : 1,
      totalRequired: req.length,
      totalFilled,
      totalFields: all.length,
      missingRequired: missingReq,
    };
  }
}

/** FYI: No source request **/
