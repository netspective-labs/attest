/**
 * @file system-information-integrity-identify-report-and-correct-information-system-flaws.auto.ts
 * @generated This file was auto-generated at 2025-08-17T01:27:25.133Z from the FHIR R4 Questionnaire "System & Information Integrity (Identify, report, and correct information system flaws)".
 * Do not edit this file manually; re-run the generator if the source Questionnaire changes.
 * Profiles: http://hl7.org/fhir/4.0/StructureDefinition/Questionnaire
 *
 * Normalizes LHC JSON and FHIR QuestionnaireResponse into the type-safe `SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws` interface.
 */

// deno-lint-ignore no-explicit-any
type Any = any;
import {
  coerceBoolean,
  coerceDate,
  coerceNumber,
  coerceOptionalBoolean,
  coerceOptionalDate,
  coerceOptionalNumber,
  coerceOptionalString,
  coerceString,
  findLhcValueByLinkId,
  findQrAnswerByLinkId,
  isBlank,
} from "../r4q-runtime.ts";
/**
 * Form Help (from display/help controls):
 * - Identify, report, and correct information and information system flaws in a timely manner
 * - Establish processes to identify, report, and track system flaws and vulnerabilities until they are resolved.
 * - Define and follow timelines to promptly address and fix identified system vulnerabilities to reduce security risks.
 * - Implement procedures to regularly apply updates and patches to systems to protect against known vulnerabilities.
 * - Provide protection from malicious code at appropriate locations within organizational information systems
 * - Identify and secure critical points in systems and networks where integrity controls must be applied to prevent unauthorized changes.
 * - Deploy and maintain tools and processes to detect, prevent, and respond to malware infections in your systems.
 * - Update malicious code protection mechanisms when new releases are available
 * - Regularly update malware protection tools and definitions to ensure defense against the latest threats.
 * - Establish procedures to manage and verify timely updates to malicious code protection systems.
 * - Perform periodic scans of the information system and real-time scans of files from external sources
 * - Deploy anti-malware solutions to regularly scan systems and files for malicious software and remove threats promptly.
 * - Schedule regular scans of systems and files to detect and address malware or security issues consistently.
 * - Use real-time scanning to detect threats immediately and monitor file integrity to prevent unauthorized changes.
 * - Establish procedures to review scan results, respond to detected threats, and test scanning tools for effectiveness.
 */
/** Map of normalized property names to their source `linkId`. */
export const SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlawsLinkIds =
  {
    howDoesYourOrganizationIdentifySystemFlawsAndVulnerabilities:
      "758011605310",
    howAreIdentifiedFlawsReportedAndTracked: "854540559647",
    criticalSeverityFlaws: "885354230428",
    highSeverityFlaws: "149460684671",
    mediumLowSeverityFlaws: "119144494365",
    howAreSecurityPatchesAndUpdatesManaged: "896010001522",
    additionalNotesOrComments: "731360730463",
    supportingDocumentation: "231346071278",
    doYouHaveAMaliciousCodeProtectionPolicyDocument: "892692932760",
    selectAllLocationsWhereMaliciousCodeProtectionIsImplemented: "457010911238",
    primaryAntiMalwareProductSolutionEGMicrosoftDefenderMcAfeeSymantec:
      "149423997720",
    antiMalwareVersionReleaseVersionNumberOrReleaseIdentifier: "343942743605",
    implementationScopeDescribeTheScopeOfYourAntiMalwareImplementationEGAllCompanyEndpointsSpecificServers:
      "581419297519",
    realTimeProtectionEnabled: "394557514652",
    centrallyManaged: "137330973781",
    additionalNotesOrComments2: "750023247979",
    supportingDocumentation2: "278751204941",
    howFrequentlyAreMaliciousCodeProtectionMechanismsUpdated: "830996907328",
    howAreMaliciousCodeProtectionUpdatesManaged: "733457774453",
    additionalNotesOrComments3: "660268414578",
    supportingDocumentation3: "717091491475",
    doYouHaveASystemScanningPolicyDocumentationFileScanningPolicyAndScanningProcedureDocumentation:
      "470606272303",
    doesYourOrganizationHaveAntivirusAntiMalwareSoftwareInstalledOnAllSystems:
      "189466095401",
    whatAntivirusAntiMalwareSolutionIsCurrentlyDeployedEGMicrosoftDefenderNortonMcAfeeEtc:
      "694425083943",
    howFrequentlyAreFullSystemScansConducted: "508929065591",
    whatLevelOfThoroughnessIsUsedForPeriodicScans: "889472415570",
    areFilesFromExternalSourcesScannedInRealTime: "740865411316",
    whichExternalSourcesAreScanned: "146442608630",
    doYouEmployFileIntegrityMonitoringForCriticalSystemFiles: "842602142275",
    howAreScanResultsReviewedAndDocumentedDescribeYourProcessForReviewingAndDocumentingScanResults:
      "707425868010",
    whatIsYourResponseTimeframeWhenMalwareOrVulnerabilitiesAreDetected:
      "986030389075",
    describeYourRemediationProcessForIdentifiedIssuesDescribeYourProcessForRemediatingIssuesDetectedDuringScanning:
      "164191875680",
    hasScanningEffectivenessBeenTested: "967054991522",
    hasScanningEffectivenessBeenTested2: "892462719670",
    supportingDocumentation4: "901609884580",
  } as const;

/** Normalized view of "System & Information Integrity (Identify, report, and correct information system flaws)" answers. */
export interface SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws {
  /**
   * How does your organization identify system flaws and vulnerabilities?
   * linkId: 758011605310
   * FHIR type: choice
   * Section: Flaw Identification Process
   * Options: "Automated vulnerability scanning", "Vendor security notifications and bulletins", "Penetration testing", "Regular security assessments", "Threat intelligence feeds", "Incident response and forensics"
   * Required: no
   */
  howDoesYourOrganizationIdentifySystemFlawsAndVulnerabilities?:
    | "Automated vulnerability scanning"
    | "Vendor security notifications and bulletins"
    | "Penetration testing"
    | "Regular security assessments"
    | "Threat intelligence feeds"
    | "Incident response and forensics";

  /**
   * How are identified flaws reported and tracked?
   * linkId: 854540559647
   * FHIR type: choice
   * Section: Flaw Reporting and Tracking
   * Options: " Formal tracking system or database", "Automatic management notification", "Risk assessment and prioritization", "Communication to affected stakeholders", "Detailed documentation of findings"
   * Required: no
   */
  howAreIdentifiedFlawsReportedAndTracked?:
    | " Formal tracking system or database"
    | "Automatic management notification"
    | "Risk assessment and prioritization"
    | "Communication to affected stakeholders"
    | "Detailed documentation of findings";

  /**
   * Critical Severity Flaws:
   * linkId: 885354230428
   * FHIR type: choice
   * Section: Flaw Correction Timeline > What are your target timeframes for correcting identified flaws?
   * Options: "Immediate (within hours)", "Within 24 hours", "Within 72 hours", " Within 1 week"
   * Required: no
   */
  criticalSeverityFlaws?:
    | "Immediate (within hours)"
    | "Within 24 hours"
    | "Within 72 hours"
    | " Within 1 week";

  /**
   * High Severity Flaws:
   * linkId: 149460684671
   * FHIR type: choice
   * Section: Flaw Correction Timeline > What are your target timeframes for correcting identified flaws?
   * Options: "Within 1 week", "Within 2 weeks", "Within 1 month"
   * Required: no
   */
  highSeverityFlaws?: "Within 1 week" | "Within 2 weeks" | "Within 1 month";

  /**
   * Medium/Low Severity Flaws:
   * linkId: 119144494365
   * FHIR type: choice
   * Section: Flaw Correction Timeline > What are your target timeframes for correcting identified flaws?
   * Options: "Within 1 month", "Within 1 quarter", "Next scheduled maintenance window"
   * Required: no
   */
  mediumLowSeverityFlaws?:
    | "Within 1 month"
    | "Within 1 quarter"
    | "Next scheduled maintenance window";

  /**
   * How are security patches and updates managed?
   * linkId: 896010001522
   * FHIR type: choice
   * Section: Patch Management Process
   * Options: "Testing in non-production environment before deployment", "Formal change control process", "Rollback procedures in case of issues", "Automated patch deployment capabilities", "Emergency patching procedures for critical flaws", "Documentation of all patches applied"
   * Required: no
   */
  howAreSecurityPatchesAndUpdatesManaged?:
    | "Testing in non-production environment before deployment"
    | "Formal change control process"
    | "Rollback procedures in case of issues"
    | "Automated patch deployment capabilities"
    | "Emergency patching procedures for critical flaws"
    | "Documentation of all patches applied";

  /**
   * Additional Notes or Comments
   * linkId: 731360730463
   * FHIR type: text
   * Entry format: Any additional context, challenges, or implementation details...
   * Required: no
   */
  additionalNotesOrComments?: string;

  /**
   * Supporting Documentation
   * linkId: 231346071278
   * FHIR type: text
   * Entry format: List or describe the supporting documentation you have available (policies, procedures, scan reports, etc.)...
   * Required: no
   */
  supportingDocumentation?: string;

  /**
   * Do you have a malicious code protection policy document?
   * linkId: 892692932760
   * FHIR type: choice
   * Section: SI.L1-3.14.2 - Malicious Code Protection
   * Options: "Yes", "No"
   * Required: no
   */
  doYouHaveAMaliciousCodeProtectionPolicyDocument?: "Yes" | "No";

  /**
   * Select all locations where malicious code protection is implemented:
   * linkId: 457010911238
   * FHIR type: choice
   * Section: Protection Locations
   * Options: "Email Gateway", "Web Proxy/Gateway", "Perimeter Firewall", "VPN Gateway", "Endpoints (Workstations, Laptops)", "Servers", "Mobile Devices"
   * Required: no
   */
  selectAllLocationsWhereMaliciousCodeProtectionIsImplemented?:
    | "Email Gateway"
    | "Web Proxy/Gateway"
    | "Perimeter Firewall"
    | "VPN Gateway"
    | "Endpoints (Workstations, Laptops)"
    | "Servers"
    | "Mobile Devices";

  /**
   * Primary Anti-Malware Product/Solution: e.g., Microsoft Defender, McAfee, Symantec
   * linkId: 149423997720
   * FHIR type: string
   * Entry format: Enter primary anti-malware solution
   * Section: Implementation Details
   * Required: no
   */
  primaryAntiMalwareProductSolutionEGMicrosoftDefenderMcAfeeSymantec?: string;

  /**
   * Anti-Malware Version/Release: Version number or release identifier
   * linkId: 343942743605
   * FHIR type: string
   * Entry format: Enter version or release identifier
   * Section: Implementation Details
   * Required: no
   */
  antiMalwareVersionReleaseVersionNumberOrReleaseIdentifier?: string;

  /**
   * Implementation Scope: Describe the scope of your anti-malware implementation (e.g., all company endpoints, specific servers)
   * linkId: 581419297519
   * FHIR type: text
   * Entry format: Describe your anti-malware implementation scope...
   * Section: Implementation Details
   * Required: no
   */
  implementationScopeDescribeTheScopeOfYourAntiMalwareImplementationEGAllCompanyEndpointsSpecificServers?:
    string;

  /**
   * Real-Time Protection Enabled:
   * linkId: 394557514652
   * FHIR type: choice
   * Section: Implementation Details
   * Options: "Yes", "No"
   * Required: no
   */
  realTimeProtectionEnabled?: "Yes" | "No";

  /**
   * Centrally Managed:
   * linkId: 137330973781
   * FHIR type: choice
   * Section: Implementation Details
   * Options: "Yes", "No"
   * Required: no
   */
  centrallyManaged?: "Yes" | "No";

  /**
   * Additional Notes or Comments
   * linkId: 750023247979
   * FHIR type: text
   * Entry format: Any additional context, challenges, or implementation details...
   * Required: no
   */
  additionalNotesOrComments2?: string;

  /**
   * Supporting Documentation
   * linkId: 278751204941
   * FHIR type: text
   * Entry format: List or describe the supporting documentation you have available(policies, configuration guides, deployment records, etc.)...
   * Required: no
   */
  supportingDocumentation2?: string;

  /**
   * How frequently are malicious code protection mechanisms updated?
   * linkId: 830996907328
   * FHIR type: choice
   * Section: Update Frequency
   * Options: "Real-time updates (as available)", "Hourly", "Daily", "Weekly", "Manual updates only"
   * Required: no
   */
  howFrequentlyAreMaliciousCodeProtectionMechanismsUpdated?:
    | "Real-time updates (as available)"
    | "Hourly"
    | "Daily"
    | "Weekly"
    | "Manual updates only";

  /**
   * How are malicious code protection updates managed?
   * linkId: 733457774453
   * FHIR type: choice
   * Section: Update Management Process
   * Options: "Automatic updates enabled", "Centralized update management system", "Verification of successful updates", "Rollback capability for problematic updates", "Testing of updates before deployment", "Notification of update status and failures"
   * Required: no
   */
  howAreMaliciousCodeProtectionUpdatesManaged?:
    | "Automatic updates enabled"
    | "Centralized update management system"
    | "Verification of successful updates"
    | "Rollback capability for problematic updates"
    | "Testing of updates before deployment"
    | "Notification of update status and failures";

  /**
   * Additional Notes or Comments
   * linkId: 660268414578
   * FHIR type: text
   * Entry format: Any additional context challenges, or implementation details...
   * Required: no
   */
  additionalNotesOrComments3?: string;

  /**
   * Supporting Documentation
   * linkId: 717091491475
   * FHIR type: text
   * Entry format: List o describe the supporting documentation you have available (update procedures, verification logs, rollback plans, etc.)...
   * Required: no
   */
  supportingDocumentation3?: string;

  /**
   * Do you have a system scanning policy documentation, file scanning policy, and scanning procedure documentation?
   * linkId: 470606272303
   * FHIR type: choice
   * Options: "Yes", "No"
   * Required: no
   */
  doYouHaveASystemScanningPolicyDocumentationFileScanningPolicyAndScanningProcedureDocumentation?:
    | "Yes"
    | "No";

  /**
   * Does your organization have antivirus/anti-malware software installed on all systems?
   * linkId: 189466095401
   * FHIR type: choice
   * Section: Anti-Malware Implementation
   * Options: "Yes", "No", "Partially (some systems only)"
   * Required: no
   */
  doesYourOrganizationHaveAntivirusAntiMalwareSoftwareInstalledOnAllSystems?:
    | "Yes"
    | "No"
    | "Partially (some systems only)";

  /**
   * What antivirus/anti-malware solution is currently deployed? e.g., Microsoft Defender, Norton, McAfee, etc.
   * linkId: 694425083943
   * FHIR type: string
   * Entry format: Enter your current antivirus/anti-malware solution
   * Section: Anti-Malware Implementation
   * Required: no
   */
  whatAntivirusAntiMalwareSolutionIsCurrentlyDeployedEGMicrosoftDefenderNortonMcAfeeEtc?:
    string;

  /**
   * How frequently are full system scans conducted?
   * linkId: 508929065591
   * FHIR type: choice
   * Entry format: -- Select Frequency --
   * Section: Periodic Scanning Implementation
   * Options: "Daily", "Weekily", "Bi-weekly", "Monthly", "Quarterly", "Custom Schedule"
   * Required: no
   */
  howFrequentlyAreFullSystemScansConducted?:
    | "Daily"
    | "Weekily"
    | "Bi-weekly"
    | "Monthly"
    | "Quarterly"
    | "Custom Schedule";

  /**
   * What level of thoroughness is used for periodic scans?
   * linkId: 889472415570
   * FHIR type: choice
   * Entry format: -- Select Scan Depth --
   * Section: Periodic Scanning Implementation
   * Options: "Quick Scan (critical files only)", "Standard Scan (system files and common user directories)", "Full Scan (entire file system)", "Custom Scan (specific directories)"
   * Required: no
   */
  whatLevelOfThoroughnessIsUsedForPeriodicScans?:
    | "Quick Scan (critical files only)"
    | "Standard Scan (system files and common user directories)"
    | "Full Scan (entire file system)"
    | "Custom Scan (specific directories)";

  /**
   * Are files from external sources scanned in real-time?
   * linkId: 740865411316
   * FHIR type: choice
   * Section: Real-time Scanning & File Integrity
   * Options: "Yes", "No", "Partially (some sources only)"
   * Required: no
   */
  areFilesFromExternalSourcesScannedInRealTime?:
    | "Yes"
    | "No"
    | "Partially (some sources only)";

  /**
   * Which external sources are scanned?
   * linkId: 146442608630
   * FHIR type: choice
   * Options: "Internet Downloads", "Email Attachments", "Removable Media", "Cloud Storage", "Network Shares", "Other External Sources"
   * Required: no
   */
  whichExternalSourcesAreScanned?:
    | "Internet Downloads"
    | "Email Attachments"
    | "Removable Media"
    | "Cloud Storage"
    | "Network Shares"
    | "Other External Sources";

  /**
   * Do you employ file integrity monitoring for critical system files?
   * linkId: 842602142275
   * FHIR type: choice
   * Options: "Yes", "No", "Planned"
   * Required: no
   */
  doYouEmployFileIntegrityMonitoringForCriticalSystemFiles?:
    | "Yes"
    | "No"
    | "Planned";

  /**
   * How are scan results reviewed and documented? Describe your process for reviewing and documenting scan results...
   * linkId: 707425868010
   * FHIR type: text
   * Entry format: Describe your process for reviewing and documenting scan results...
   * Section: Results Handling & Testing
   * Required: no
   */
  howAreScanResultsReviewedAndDocumentedDescribeYourProcessForReviewingAndDocumentingScanResults?:
    string;

  /**
   * What is your response timeframe when malware or vulnerabilities are detected?
   * linkId: 986030389075
   * FHIR type: choice
   * Entry format: -- Select Response Timeframe --
   * Section: Results Handling & Testing
   * Options: "Immediate (within hours)", "Within 24 hours", "Within 48 hours", "Within a week", "Other (specify in notes)"
   * Required: no
   */
  whatIsYourResponseTimeframeWhenMalwareOrVulnerabilitiesAreDetected?:
    | "Immediate (within hours)"
    | "Within 24 hours"
    | "Within 48 hours"
    | "Within a week"
    | "Other (specify in notes)";

  /**
   * Describe your remediation process for identified issues: Describe your process for remediating issues detected during scanning...
   * linkId: 164191875680
   * FHIR type: text
   * Entry format: Describe your process for remediating issues detected during scanning..
   * Section: Results Handling & Testing
   * Required: no
   */
  describeYourRemediationProcessForIdentifiedIssuesDescribeYourProcessForRemediatingIssuesDetectedDuringScanning?:
    string;

  /**
   * Has scanning effectiveness been tested?
   * linkId: 967054991522
   * FHIR type: choice
   * Section: Results Handling & Testing
   * Options: "Yes", "No"
   * Required: no
   */
  hasScanningEffectivenessBeenTested?: "Yes" | "No";

  /**
   * Has scanning effectiveness been tested?
   * linkId: 892462719670
   * FHIR type: text
   * Entry format: Any additional context, challenges, or implementation details
   * Required: no
   */
  hasScanningEffectivenessBeenTested2?: string;

  /**
   * Supporting Documentation
   * linkId: 901609884580
   * FHIR type: text
   * Entry format: List or describe the supporting documentation you have available(scanning policies , procedures , scan logs , remediation records, etc.)...
   * Required: no
   */
  supportingDocumentation4?: string;
}

/** Convert an LHC JSON response into a normalized SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws object. */
export function systemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlawsLhcFormResponseAdapter(
  input: Any,
): SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws {
  return {
    howDoesYourOrganizationIdentifySystemFlawsAndVulnerabilities:
      coerceOptionalString(
        findLhcValueByLinkId(input, "758011605310"),
      ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
        "howDoesYourOrganizationIdentifySystemFlawsAndVulnerabilities"
      ],
    howAreIdentifiedFlawsReportedAndTracked: coerceOptionalString(
      findLhcValueByLinkId(input, "854540559647"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "howAreIdentifiedFlawsReportedAndTracked"
    ],
    criticalSeverityFlaws: coerceOptionalString(
      findLhcValueByLinkId(input, "885354230428"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "criticalSeverityFlaws"
    ],
    highSeverityFlaws: coerceOptionalString(
      findLhcValueByLinkId(input, "149460684671"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "highSeverityFlaws"
    ],
    mediumLowSeverityFlaws: coerceOptionalString(
      findLhcValueByLinkId(input, "119144494365"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "mediumLowSeverityFlaws"
    ],
    howAreSecurityPatchesAndUpdatesManaged: coerceOptionalString(
      findLhcValueByLinkId(input, "896010001522"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "howAreSecurityPatchesAndUpdatesManaged"
    ],
    additionalNotesOrComments: coerceOptionalString(
      findLhcValueByLinkId(input, "731360730463"),
    ),
    supportingDocumentation: coerceOptionalString(
      findLhcValueByLinkId(input, "231346071278"),
    ),
    doYouHaveAMaliciousCodeProtectionPolicyDocument: coerceOptionalString(
      findLhcValueByLinkId(input, "892692932760"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "doYouHaveAMaliciousCodeProtectionPolicyDocument"
    ],
    selectAllLocationsWhereMaliciousCodeProtectionIsImplemented:
      coerceOptionalString(
        findLhcValueByLinkId(input, "457010911238"),
      ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
        "selectAllLocationsWhereMaliciousCodeProtectionIsImplemented"
      ],
    primaryAntiMalwareProductSolutionEGMicrosoftDefenderMcAfeeSymantec:
      coerceOptionalString(findLhcValueByLinkId(input, "149423997720")),
    antiMalwareVersionReleaseVersionNumberOrReleaseIdentifier:
      coerceOptionalString(findLhcValueByLinkId(input, "343942743605")),
    implementationScopeDescribeTheScopeOfYourAntiMalwareImplementationEGAllCompanyEndpointsSpecificServers:
      coerceOptionalString(findLhcValueByLinkId(input, "581419297519")),
    realTimeProtectionEnabled: coerceOptionalString(
      findLhcValueByLinkId(input, "394557514652"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "realTimeProtectionEnabled"
    ],
    centrallyManaged: coerceOptionalString(
      findLhcValueByLinkId(input, "137330973781"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "centrallyManaged"
    ],
    additionalNotesOrComments2: coerceOptionalString(
      findLhcValueByLinkId(input, "750023247979"),
    ),
    supportingDocumentation2: coerceOptionalString(
      findLhcValueByLinkId(input, "278751204941"),
    ),
    howFrequentlyAreMaliciousCodeProtectionMechanismsUpdated:
      coerceOptionalString(
        findLhcValueByLinkId(input, "830996907328"),
      ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
        "howFrequentlyAreMaliciousCodeProtectionMechanismsUpdated"
      ],
    howAreMaliciousCodeProtectionUpdatesManaged: coerceOptionalString(
      findLhcValueByLinkId(input, "733457774453"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "howAreMaliciousCodeProtectionUpdatesManaged"
    ],
    additionalNotesOrComments3: coerceOptionalString(
      findLhcValueByLinkId(input, "660268414578"),
    ),
    supportingDocumentation3: coerceOptionalString(
      findLhcValueByLinkId(input, "717091491475"),
    ),
    doYouHaveASystemScanningPolicyDocumentationFileScanningPolicyAndScanningProcedureDocumentation:
      coerceOptionalString(
        findLhcValueByLinkId(input, "470606272303"),
      ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
        "doYouHaveASystemScanningPolicyDocumentationFileScanningPolicyAndScanningProcedureDocumentation"
      ],
    doesYourOrganizationHaveAntivirusAntiMalwareSoftwareInstalledOnAllSystems:
      coerceOptionalString(
        findLhcValueByLinkId(input, "189466095401"),
      ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
        "doesYourOrganizationHaveAntivirusAntiMalwareSoftwareInstalledOnAllSystems"
      ],
    whatAntivirusAntiMalwareSolutionIsCurrentlyDeployedEGMicrosoftDefenderNortonMcAfeeEtc:
      coerceOptionalString(findLhcValueByLinkId(input, "694425083943")),
    howFrequentlyAreFullSystemScansConducted: coerceOptionalString(
      findLhcValueByLinkId(input, "508929065591"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "howFrequentlyAreFullSystemScansConducted"
    ],
    whatLevelOfThoroughnessIsUsedForPeriodicScans: coerceOptionalString(
      findLhcValueByLinkId(input, "889472415570"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "whatLevelOfThoroughnessIsUsedForPeriodicScans"
    ],
    areFilesFromExternalSourcesScannedInRealTime: coerceOptionalString(
      findLhcValueByLinkId(input, "740865411316"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "areFilesFromExternalSourcesScannedInRealTime"
    ],
    whichExternalSourcesAreScanned: coerceOptionalString(
      findLhcValueByLinkId(input, "146442608630"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "whichExternalSourcesAreScanned"
    ],
    doYouEmployFileIntegrityMonitoringForCriticalSystemFiles:
      coerceOptionalString(
        findLhcValueByLinkId(input, "842602142275"),
      ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
        "doYouEmployFileIntegrityMonitoringForCriticalSystemFiles"
      ],
    howAreScanResultsReviewedAndDocumentedDescribeYourProcessForReviewingAndDocumentingScanResults:
      coerceOptionalString(findLhcValueByLinkId(input, "707425868010")),
    whatIsYourResponseTimeframeWhenMalwareOrVulnerabilitiesAreDetected:
      coerceOptionalString(
        findLhcValueByLinkId(input, "986030389075"),
      ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
        "whatIsYourResponseTimeframeWhenMalwareOrVulnerabilitiesAreDetected"
      ],
    describeYourRemediationProcessForIdentifiedIssuesDescribeYourProcessForRemediatingIssuesDetectedDuringScanning:
      coerceOptionalString(findLhcValueByLinkId(input, "164191875680")),
    hasScanningEffectivenessBeenTested: coerceOptionalString(
      findLhcValueByLinkId(input, "967054991522"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "hasScanningEffectivenessBeenTested"
    ],
    hasScanningEffectivenessBeenTested2: coerceOptionalString(
      findLhcValueByLinkId(input, "892462719670"),
    ),
    supportingDocumentation4: coerceOptionalString(
      findLhcValueByLinkId(input, "901609884580"),
    ),
  };
}

/** Convert a FHIR QuestionnaireResponse into a normalized SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws object. */
export function systemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlawsFhirQuestionnaireResponseAdapter(
  qr: Any,
): SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws {
  return {
    howDoesYourOrganizationIdentifySystemFlawsAndVulnerabilities:
      coerceOptionalString(
        findQrAnswerByLinkId(qr, "758011605310"),
      ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
        "howDoesYourOrganizationIdentifySystemFlawsAndVulnerabilities"
      ],
    howAreIdentifiedFlawsReportedAndTracked: coerceOptionalString(
      findQrAnswerByLinkId(qr, "854540559647"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "howAreIdentifiedFlawsReportedAndTracked"
    ],
    criticalSeverityFlaws: coerceOptionalString(
      findQrAnswerByLinkId(qr, "885354230428"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "criticalSeverityFlaws"
    ],
    highSeverityFlaws: coerceOptionalString(
      findQrAnswerByLinkId(qr, "149460684671"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "highSeverityFlaws"
    ],
    mediumLowSeverityFlaws: coerceOptionalString(
      findQrAnswerByLinkId(qr, "119144494365"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "mediumLowSeverityFlaws"
    ],
    howAreSecurityPatchesAndUpdatesManaged: coerceOptionalString(
      findQrAnswerByLinkId(qr, "896010001522"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "howAreSecurityPatchesAndUpdatesManaged"
    ],
    additionalNotesOrComments: coerceOptionalString(
      findQrAnswerByLinkId(qr, "731360730463"),
    ),
    supportingDocumentation: coerceOptionalString(
      findQrAnswerByLinkId(qr, "231346071278"),
    ),
    doYouHaveAMaliciousCodeProtectionPolicyDocument: coerceOptionalString(
      findQrAnswerByLinkId(qr, "892692932760"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "doYouHaveAMaliciousCodeProtectionPolicyDocument"
    ],
    selectAllLocationsWhereMaliciousCodeProtectionIsImplemented:
      coerceOptionalString(
        findQrAnswerByLinkId(qr, "457010911238"),
      ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
        "selectAllLocationsWhereMaliciousCodeProtectionIsImplemented"
      ],
    primaryAntiMalwareProductSolutionEGMicrosoftDefenderMcAfeeSymantec:
      coerceOptionalString(findQrAnswerByLinkId(qr, "149423997720")),
    antiMalwareVersionReleaseVersionNumberOrReleaseIdentifier:
      coerceOptionalString(findQrAnswerByLinkId(qr, "343942743605")),
    implementationScopeDescribeTheScopeOfYourAntiMalwareImplementationEGAllCompanyEndpointsSpecificServers:
      coerceOptionalString(findQrAnswerByLinkId(qr, "581419297519")),
    realTimeProtectionEnabled: coerceOptionalString(
      findQrAnswerByLinkId(qr, "394557514652"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "realTimeProtectionEnabled"
    ],
    centrallyManaged: coerceOptionalString(
      findQrAnswerByLinkId(qr, "137330973781"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "centrallyManaged"
    ],
    additionalNotesOrComments2: coerceOptionalString(
      findQrAnswerByLinkId(qr, "750023247979"),
    ),
    supportingDocumentation2: coerceOptionalString(
      findQrAnswerByLinkId(qr, "278751204941"),
    ),
    howFrequentlyAreMaliciousCodeProtectionMechanismsUpdated:
      coerceOptionalString(
        findQrAnswerByLinkId(qr, "830996907328"),
      ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
        "howFrequentlyAreMaliciousCodeProtectionMechanismsUpdated"
      ],
    howAreMaliciousCodeProtectionUpdatesManaged: coerceOptionalString(
      findQrAnswerByLinkId(qr, "733457774453"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "howAreMaliciousCodeProtectionUpdatesManaged"
    ],
    additionalNotesOrComments3: coerceOptionalString(
      findQrAnswerByLinkId(qr, "660268414578"),
    ),
    supportingDocumentation3: coerceOptionalString(
      findQrAnswerByLinkId(qr, "717091491475"),
    ),
    doYouHaveASystemScanningPolicyDocumentationFileScanningPolicyAndScanningProcedureDocumentation:
      coerceOptionalString(
        findQrAnswerByLinkId(qr, "470606272303"),
      ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
        "doYouHaveASystemScanningPolicyDocumentationFileScanningPolicyAndScanningProcedureDocumentation"
      ],
    doesYourOrganizationHaveAntivirusAntiMalwareSoftwareInstalledOnAllSystems:
      coerceOptionalString(
        findQrAnswerByLinkId(qr, "189466095401"),
      ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
        "doesYourOrganizationHaveAntivirusAntiMalwareSoftwareInstalledOnAllSystems"
      ],
    whatAntivirusAntiMalwareSolutionIsCurrentlyDeployedEGMicrosoftDefenderNortonMcAfeeEtc:
      coerceOptionalString(findQrAnswerByLinkId(qr, "694425083943")),
    howFrequentlyAreFullSystemScansConducted: coerceOptionalString(
      findQrAnswerByLinkId(qr, "508929065591"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "howFrequentlyAreFullSystemScansConducted"
    ],
    whatLevelOfThoroughnessIsUsedForPeriodicScans: coerceOptionalString(
      findQrAnswerByLinkId(qr, "889472415570"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "whatLevelOfThoroughnessIsUsedForPeriodicScans"
    ],
    areFilesFromExternalSourcesScannedInRealTime: coerceOptionalString(
      findQrAnswerByLinkId(qr, "740865411316"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "areFilesFromExternalSourcesScannedInRealTime"
    ],
    whichExternalSourcesAreScanned: coerceOptionalString(
      findQrAnswerByLinkId(qr, "146442608630"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "whichExternalSourcesAreScanned"
    ],
    doYouEmployFileIntegrityMonitoringForCriticalSystemFiles:
      coerceOptionalString(
        findQrAnswerByLinkId(qr, "842602142275"),
      ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
        "doYouEmployFileIntegrityMonitoringForCriticalSystemFiles"
      ],
    howAreScanResultsReviewedAndDocumentedDescribeYourProcessForReviewingAndDocumentingScanResults:
      coerceOptionalString(findQrAnswerByLinkId(qr, "707425868010")),
    whatIsYourResponseTimeframeWhenMalwareOrVulnerabilitiesAreDetected:
      coerceOptionalString(
        findQrAnswerByLinkId(qr, "986030389075"),
      ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
        "whatIsYourResponseTimeframeWhenMalwareOrVulnerabilitiesAreDetected"
      ],
    describeYourRemediationProcessForIdentifiedIssuesDescribeYourProcessForRemediatingIssuesDetectedDuringScanning:
      coerceOptionalString(findQrAnswerByLinkId(qr, "164191875680")),
    hasScanningEffectivenessBeenTested: coerceOptionalString(
      findQrAnswerByLinkId(qr, "967054991522"),
    ) as SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws[
      "hasScanningEffectivenessBeenTested"
    ],
    hasScanningEffectivenessBeenTested2: coerceOptionalString(
      findQrAnswerByLinkId(qr, "892462719670"),
    ),
    supportingDocumentation4: coerceOptionalString(
      findQrAnswerByLinkId(qr, "901609884580"),
    ),
  };
}

/** High-level interpreter with factories, validation, and readiness scoring. */
export class SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlawsInterpreter {
  constructor(
    readonly value:
      SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws,
  ) {}

  /** Factory: build from LHC JSON. */
  static fromLhcFormResponse(
    input: Any,
  ): SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlawsInterpreter {
    return new SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlawsInterpreter(
      systemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlawsLhcFormResponseAdapter(
        input,
      ),
    );
  }

  /** Factory: build from FHIR QuestionnaireResponse. */
  static fromQuestionnaireResponse(
    qr: Any,
  ): SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlawsInterpreter {
    return new SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlawsInterpreter(
      systemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlawsFhirQuestionnaireResponseAdapter(
        qr,
      ),
    );
  }

  /** Check required fields and report any missing or blank. */
  validateRequiredFields(): {
    ok: boolean;
    missing: Array<
      keyof SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws
    >;
  } {
    const missing: Array<
      keyof SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws
    > = [];
    const req: Array<
      keyof SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws
    > = [];
    for (const k of req) {
      const v = (this.value as Any)[k];
      if (isBlank(v)) missing.push(k);
    }
    return { ok: missing.length === 0, missing };
  }

  /**
   * Assess readiness with a simple completeness score. This is meant to be
   * used to help understand how complete the types are and serves as an
   * example of how to use the generated code.
   * - requiredCovered: percentage of required fields that are non-blank
   * - overallFilled: count of non-blank fields among all known properties
   */
  assessReadiness(): {
    formTitle: string;
    requiredCovered: number; // 0..1
    totalRequired: number;
    totalFilled: number;
    totalFields: number;
    missingRequired: Array<
      keyof SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws
    >;
  } {
    const req: Array<
      keyof SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws
    > = [];
    const all: Array<
      keyof SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws
    > = [
      "howDoesYourOrganizationIdentifySystemFlawsAndVulnerabilities",
      "howAreIdentifiedFlawsReportedAndTracked",
      "criticalSeverityFlaws",
      "highSeverityFlaws",
      "mediumLowSeverityFlaws",
      "howAreSecurityPatchesAndUpdatesManaged",
      "additionalNotesOrComments",
      "supportingDocumentation",
      "doYouHaveAMaliciousCodeProtectionPolicyDocument",
      "selectAllLocationsWhereMaliciousCodeProtectionIsImplemented",
      "primaryAntiMalwareProductSolutionEGMicrosoftDefenderMcAfeeSymantec",
      "antiMalwareVersionReleaseVersionNumberOrReleaseIdentifier",
      "implementationScopeDescribeTheScopeOfYourAntiMalwareImplementationEGAllCompanyEndpointsSpecificServers",
      "realTimeProtectionEnabled",
      "centrallyManaged",
      "additionalNotesOrComments2",
      "supportingDocumentation2",
      "howFrequentlyAreMaliciousCodeProtectionMechanismsUpdated",
      "howAreMaliciousCodeProtectionUpdatesManaged",
      "additionalNotesOrComments3",
      "supportingDocumentation3",
      "doYouHaveASystemScanningPolicyDocumentationFileScanningPolicyAndScanningProcedureDocumentation",
      "doesYourOrganizationHaveAntivirusAntiMalwareSoftwareInstalledOnAllSystems",
      "whatAntivirusAntiMalwareSolutionIsCurrentlyDeployedEGMicrosoftDefenderNortonMcAfeeEtc",
      "howFrequentlyAreFullSystemScansConducted",
      "whatLevelOfThoroughnessIsUsedForPeriodicScans",
      "areFilesFromExternalSourcesScannedInRealTime",
      "whichExternalSourcesAreScanned",
      "doYouEmployFileIntegrityMonitoringForCriticalSystemFiles",
      "howAreScanResultsReviewedAndDocumentedDescribeYourProcessForReviewingAndDocumentingScanResults",
      "whatIsYourResponseTimeframeWhenMalwareOrVulnerabilitiesAreDetected",
      "describeYourRemediationProcessForIdentifiedIssuesDescribeYourProcessForRemediatingIssuesDetectedDuringScanning",
      "hasScanningEffectivenessBeenTested",
      "hasScanningEffectivenessBeenTested2",
      "supportingDocumentation4",
    ];

    let reqFilled = 0;
    const missingReq: Array<
      keyof SystemInformationIntegrityIdentifyReportAndCorrectInformationSystemFlaws
    > = [];
    for (const k of req) {
      const v = (this.value as Any)[k];
      if (!isBlank(v)) reqFilled++;
      else missingReq.push(k);
    }

    let totalFilled = 0;
    for (const k of all) {
      if (!isBlank((this.value as Any)[k])) totalFilled++;
    }

    return {
      formTitle:
        "System & Information Integrity (Identify, report, and correct information system flaws)",
      requiredCovered: req.length ? reqFilled / req.length : 1,
      totalRequired: req.length,
      totalFilled,
      totalFields: all.length,
      missingRequired: missingReq,
    };
  }
}
