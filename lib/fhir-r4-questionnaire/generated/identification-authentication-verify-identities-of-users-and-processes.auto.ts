/**
 * @file identification-authentication-verify-identities-of-users-and-processes.auto.ts
 * @generated This file was auto-generated at 2025-08-17T01:00:18.923Z from the FHIR R4 Questionnaire "Identification & Authentication (Verify identities of users and processes)".
 * Do not edit this file manually; re-run the generator if the source Questionnaire changes.
 * Profiles: http://hl7.org/fhir/4.0/StructureDefinition/Questionnaire
 *
 * Normalizes LHC JSON and FHIR QuestionnaireResponse into the type-safe `IdentificationAuthenticationVerifyIdentitiesOfUsersAndProcesses` interface.
 */

// deno-lint-ignore no-explicit-any
type Any = any;
import {
  coerceOptionalNumber,
  coerceOptionalString,
  findLhcValueByLinkId,
  findQrAnswerByLinkId,
  isBlank,
} from "../r4q-runtime.ts";
/**
 * Form Help (from display/help controls):
 * - Identify information system users, processes acting on behalf of users, or devices.
 * - Manage service accounts carefully by assigning minimal privileges and regularly reviewing their usage to prevent misuse.
 * - Maintain an up-to-date list of all devices connected to the network to track and manage authorized hardware
 * - Authenticate (or verify) the identities of those users, processes, or devices, as a prerequisite to allowing access to organizational information systems.
 * - Set and enforce strong password rules to ensure users and processes securely verify their identity before accessing systems.
 * - Implement procedures to detect, respond to, and limit the impact of failed authentication attempts to protect against unauthorized access.
 */
/** Map of normalized property names to their source `linkId`. */
export const IdentificationAuthenticationVerifyIdentitiesOfUsersAndProcessesLinkIds =
  {
    implementationStatus: "362061549890",
    userIdentificationStandards: "139461602895",
    numberOfServiceAccounts: "179545641231",
    checkAllThatApply: "753553198622",
    doYouHaveADeviceInventorySpreadsheet: "926744954268",
    deviceIdentification: "359160217347",
    workstationsLaptops: "878410531769",
    servers: "361034048943",
    mobileDevices: "424090205463",
    networkDevices: "764441913827",
    identityVerificationProcess: "297397401977",
    supportingDocumentation: "210356958517",
    additionalNotes: "268793244463",
    implementationStatus2: "676336695824",
    userAuthenticationMethods: "901079756471",
    minimumLengthCharacters: "444552965098",
    passwordExpirationDays: "499668919305",
    passwordHistoryPasswordsRemembered: "190124104069",
    clickAllThatApply: "404025003688",
    multiFactorAuthentication: "928879235030",
    defaultCredentialManagement: "830887074055",
    numberOfFailedAttemptsBeforeLockout: "647413778355",
    accountLockoutDurationMinutes: "552155632772",
    clickAllThatApply2: "947716241721",
    supportingDocumentation2: "230111377333",
    additionalNotes2: "939036015644",
  } as const;

/** Normalized view of "Identification & Authentication (Verify identities of users and processes)" answers. */
export interface IdentificationAuthenticationVerifyIdentitiesOfUsersAndProcesses {
  /**
   * Implementation Status
   * linkId: 362061549890
   * FHIR type: choice
   * Options: "Fully Implemented", "Partially Implemented", "Not Implemented"
   * Required: no
   */
  implementationStatus?:
    | "Fully Implemented"
    | "Partially Implemented"
    | "Not Implemented";

  /**
   * User Identification Standards
   * linkId: 139461602895
   * FHIR type: choice
   * Options: " First name + last name (john.smith)", " First initial + last name (jsmith)", " Employee ID numbers (EMP001234)", " Department codes + names (IT-jsmith)"
   * Required: no
   */
  userIdentificationStandards?:
    | " First name + last name (john.smith)"
    | " First initial + last name (jsmith)"
    | " Employee ID numbers (EMP001234)"
    | " Department codes + names (IT-jsmith)";

  /**
   * Number of service accounts:
   * linkId: 179545641231
   * FHIR type: integer
   * Entry format: Enter number
   * Section: Service Account Management
   * Required: no
   */
  numberOfServiceAccounts?: number;

  /**
   * Check all that apply:
   * linkId: 753553198622
   * FHIR type: choice
   * Section: Service Account Management
   * Options: " Database services", " Web applications", " Backup processes", " Monitoring/logging services", "Security scanning tools"
   * Required: no
   */
  checkAllThatApply?:
    | " Database services"
    | " Web applications"
    | " Backup processes"
    | " Monitoring/logging services"
    | "Security scanning tools";

  /**
   * Do you have a device inventory spreadsheet?
   * linkId: 926744954268
   * FHIR type: choice
   * Section: Service Account Management
   * Options: "Yes", "No"
   * Required: no
   */
  doYouHaveADeviceInventorySpreadsheet?: "Yes" | "No";

  /**
   * Device Identification
   * linkId: 359160217347
   * FHIR type: choice
   * Options: "MAC addresses", "IP addresses (static)", "Computer/device names", "Asset tag numbers", "Serial numbers", "Certificates/digital signatures"
   * Required: no
   */
  deviceIdentification?:
    | "MAC addresses"
    | "IP addresses (static)"
    | "Computer/device names"
    | "Asset tag numbers"
    | "Serial numbers"
    | "Certificates/digital signatures";

  /**
   * Workstations/laptops:
   * linkId: 878410531769
   * FHIR type: integer
   * Section: Device Inventory
   * Required: no
   */
  workstationsLaptops?: number;

  /**
   * Servers:
   * linkId: 361034048943
   * FHIR type: integer
   * Section: Device Inventory
   * Required: no
   */
  servers?: number;

  /**
   * Mobile devices:
   * linkId: 424090205463
   * FHIR type: integer
   * Section: Device Inventory
   * Required: no
   */
  mobileDevices?: number;

  /**
   * Network devices:
   * linkId: 764441913827
   * FHIR type: integer
   * Section: Device Inventory
   * Required: no
   */
  networkDevices?: number;

  /**
   * Identity Verification Process
   * linkId: 297397401977
   * FHIR type: choice
   * Options: "HR verification with employee records", "Manager approval with written authorization", "Background check completion", "Photo identification verification"
   * Required: no
   */
  identityVerificationProcess?:
    | "HR verification with employee records"
    | "Manager approval with written authorization"
    | "Background check completion"
    | "Photo identification verification";

  /**
   * Supporting Documentation
   * linkId: 210356958517
   * FHIR type: choice
   * Options: "Yes", "No"
   * Required: no
   */
  supportingDocumentation?: "Yes" | "No";

  /**
   * Additional Notes
   * linkId: 268793244463
   * FHIR type: text
   * Entry format: Any additional notes, remediation plans, or implementation challenges...
   * Required: no
   */
  additionalNotes?: string;

  /**
   * Implementation Status
   * linkId: 676336695824
   * FHIR type: choice
   * Options: "Fully Implemented", "Partially Implemented", "Not Implemented"
   * Required: no
   */
  implementationStatus2?:
    | "Fully Implemented"
    | "Partially Implemented"
    | "Not Implemented";

  /**
   * User Authentication Methods
   * linkId: 901079756471
   * FHIR type: choice
   * Options: "Username and password", "Multi-factor authentication (MFA)", "Smart cards/PIV cards", "Biometric authentication", " Digital certificates", "Single sign-on (SSO)"
   * Required: no
   */
  userAuthenticationMethods?:
    | "Username and password"
    | "Multi-factor authentication (MFA)"
    | "Smart cards/PIV cards"
    | "Biometric authentication"
    | " Digital certificates"
    | "Single sign-on (SSO)";

  /**
   * Minimum length (characters):
   * linkId: 444552965098
   * FHIR type: integer
   * Entry format: 8
   * Section: Password Requirements
   * Required: no
   */
  minimumLengthCharacters?: number;

  /**
   * Password expiration (days):
   * linkId: 499668919305
   * FHIR type: integer
   * Entry format: 90
   * Section: Password Requirements
   * Required: no
   */
  passwordExpirationDays?: number;

  /**
   * Password history (passwords remembered):
   * linkId: 190124104069
   * FHIR type: integer
   * Entry format: 5
   * Section: Password Requirements
   * Required: no
   */
  passwordHistoryPasswordsRemembered?: number;

  /**
   * Click all that apply:
   * linkId: 404025003688
   * FHIR type: choice
   * Section: Password Requirements
   * Options: "Uppercase letters required", "Lowercase letters required", "Numbers required", "Special characters required"
   * Required: no
   */
  clickAllThatApply?:
    | "Uppercase letters required"
    | "Lowercase letters required"
    | "Numbers required"
    | "Special characters required";

  /**
   * Multi-Factor Authentication
   * linkId: 928879235030
   * FHIR type: choice
   * Options: "Yes, for all users and systems", "Yes, for privileged accounts only", "Yes, for remote access only", "Yes, for critical systems only", "No, not implemented"
   * Required: no
   */
  multiFactorAuthentication?:
    | "Yes, for all users and systems"
    | "Yes, for privileged accounts only"
    | "Yes, for remote access only"
    | "Yes, for critical systems only"
    | "No, not implemented";

  /**
   * Default Credential Management
   * linkId: 830887074055
   * FHIR type: choice
   * Options: "Always changed before deployment", "Changed during initial configuration", "Users required to change on first login", "No formal process"
   * Required: no
   */
  defaultCredentialManagement?:
    | "Always changed before deployment"
    | "Changed during initial configuration"
    | "Users required to change on first login"
    | "No formal process";

  /**
   * Number of failed attempts before lockout:
   * linkId: 647413778355
   * FHIR type: integer
   * Entry format: 3
   * Section: Authentication Failure Handling
   * Required: no
   */
  numberOfFailedAttemptsBeforeLockout?: number;

  /**
   * Account lockout duration (minutes):
   * linkId: 552155632772
   * FHIR type: integer
   * Entry format: 30
   * Section: Authentication Failure Handling
   * Required: no
   */
  accountLockoutDurationMinutes?: number;

  /**
   * Click all that apply:
   * linkId: 947716241721
   * FHIR type: choice
   * Section: Authentication Failure Handling
   * Options: "Administrator notification sent", " Security team alerted", "Logged for review"
   * Required: no
   */
  clickAllThatApply2?:
    | "Administrator notification sent"
    | " Security team alerted"
    | "Logged for review";

  /**
   * Supporting Documentation
   * linkId: 230111377333
   * FHIR type: choice
   * Options: "Yes", "No"
   * Required: no
   */
  supportingDocumentation2?: "Yes" | "No";

  /**
   * Additional Notes
   * linkId: 939036015644
   * FHIR type: text
   * Entry format: Any additional notes, remediation plans, or implementation challenges...
   * Required: no
   */
  additionalNotes2?: string;
}

/** Convert an LHC JSON response into a normalized IdentificationAuthenticationVerifyIdentitiesOfUsersAndProcesses object. */
export function identificationAuthenticationVerifyIdentitiesOfUsersAndProcessesLhcFormResponseAdapter(
  input: Any,
): IdentificationAuthenticationVerifyIdentitiesOfUsersAndProcesses {
  return {
    implementationStatus: coerceOptionalString(
      findLhcValueByLinkId(input, "362061549890"),
    ),
    userIdentificationStandards: coerceOptionalString(
      findLhcValueByLinkId(input, "139461602895"),
    ),
    numberOfServiceAccounts: coerceOptionalNumber(
      findLhcValueByLinkId(input, "179545641231"),
    ),
    checkAllThatApply: coerceOptionalString(
      findLhcValueByLinkId(input, "753553198622"),
    ),
    doYouHaveADeviceInventorySpreadsheet: coerceOptionalString(
      findLhcValueByLinkId(input, "926744954268"),
    ),
    deviceIdentification: coerceOptionalString(
      findLhcValueByLinkId(input, "359160217347"),
    ),
    workstationsLaptops: coerceOptionalNumber(
      findLhcValueByLinkId(input, "878410531769"),
    ),
    servers: coerceOptionalNumber(findLhcValueByLinkId(input, "361034048943")),
    mobileDevices: coerceOptionalNumber(
      findLhcValueByLinkId(input, "424090205463"),
    ),
    networkDevices: coerceOptionalNumber(
      findLhcValueByLinkId(input, "764441913827"),
    ),
    identityVerificationProcess: coerceOptionalString(
      findLhcValueByLinkId(input, "297397401977"),
    ),
    supportingDocumentation: coerceOptionalString(
      findLhcValueByLinkId(input, "210356958517"),
    ),
    additionalNotes: coerceOptionalString(
      findLhcValueByLinkId(input, "268793244463"),
    ),
    implementationStatus2: coerceOptionalString(
      findLhcValueByLinkId(input, "676336695824"),
    ),
    userAuthenticationMethods: coerceOptionalString(
      findLhcValueByLinkId(input, "901079756471"),
    ),
    minimumLengthCharacters: coerceOptionalNumber(
      findLhcValueByLinkId(input, "444552965098"),
    ),
    passwordExpirationDays: coerceOptionalNumber(
      findLhcValueByLinkId(input, "499668919305"),
    ),
    passwordHistoryPasswordsRemembered: coerceOptionalNumber(
      findLhcValueByLinkId(input, "190124104069"),
    ),
    clickAllThatApply: coerceOptionalString(
      findLhcValueByLinkId(input, "404025003688"),
    ),
    multiFactorAuthentication: coerceOptionalString(
      findLhcValueByLinkId(input, "928879235030"),
    ),
    defaultCredentialManagement: coerceOptionalString(
      findLhcValueByLinkId(input, "830887074055"),
    ),
    numberOfFailedAttemptsBeforeLockout: coerceOptionalNumber(
      findLhcValueByLinkId(input, "647413778355"),
    ),
    accountLockoutDurationMinutes: coerceOptionalNumber(
      findLhcValueByLinkId(input, "552155632772"),
    ),
    clickAllThatApply2: coerceOptionalString(
      findLhcValueByLinkId(input, "947716241721"),
    ),
    supportingDocumentation2: coerceOptionalString(
      findLhcValueByLinkId(input, "230111377333"),
    ),
    additionalNotes2: coerceOptionalString(
      findLhcValueByLinkId(input, "939036015644"),
    ),
  };
}

/** Convert a FHIR QuestionnaireResponse into a normalized IdentificationAuthenticationVerifyIdentitiesOfUsersAndProcesses object. */
export function identificationAuthenticationVerifyIdentitiesOfUsersAndProcessesFhirQuestionnaireResponseAdapter(
  qr: Any,
): IdentificationAuthenticationVerifyIdentitiesOfUsersAndProcesses {
  return {
    implementationStatus: coerceOptionalString(
      findQrAnswerByLinkId(qr, "362061549890"),
    ),
    userIdentificationStandards: coerceOptionalString(
      findQrAnswerByLinkId(qr, "139461602895"),
    ),
    numberOfServiceAccounts: coerceOptionalNumber(
      findQrAnswerByLinkId(qr, "179545641231"),
    ),
    checkAllThatApply: coerceOptionalString(
      findQrAnswerByLinkId(qr, "753553198622"),
    ),
    doYouHaveADeviceInventorySpreadsheet: coerceOptionalString(
      findQrAnswerByLinkId(qr, "926744954268"),
    ),
    deviceIdentification: coerceOptionalString(
      findQrAnswerByLinkId(qr, "359160217347"),
    ),
    workstationsLaptops: coerceOptionalNumber(
      findQrAnswerByLinkId(qr, "878410531769"),
    ),
    servers: coerceOptionalNumber(findQrAnswerByLinkId(qr, "361034048943")),
    mobileDevices: coerceOptionalNumber(
      findQrAnswerByLinkId(qr, "424090205463"),
    ),
    networkDevices: coerceOptionalNumber(
      findQrAnswerByLinkId(qr, "764441913827"),
    ),
    identityVerificationProcess: coerceOptionalString(
      findQrAnswerByLinkId(qr, "297397401977"),
    ),
    supportingDocumentation: coerceOptionalString(
      findQrAnswerByLinkId(qr, "210356958517"),
    ),
    additionalNotes: coerceOptionalString(
      findQrAnswerByLinkId(qr, "268793244463"),
    ),
    implementationStatus2: coerceOptionalString(
      findQrAnswerByLinkId(qr, "676336695824"),
    ),
    userAuthenticationMethods: coerceOptionalString(
      findQrAnswerByLinkId(qr, "901079756471"),
    ),
    minimumLengthCharacters: coerceOptionalNumber(
      findQrAnswerByLinkId(qr, "444552965098"),
    ),
    passwordExpirationDays: coerceOptionalNumber(
      findQrAnswerByLinkId(qr, "499668919305"),
    ),
    passwordHistoryPasswordsRemembered: coerceOptionalNumber(
      findQrAnswerByLinkId(qr, "190124104069"),
    ),
    clickAllThatApply: coerceOptionalString(
      findQrAnswerByLinkId(qr, "404025003688"),
    ),
    multiFactorAuthentication: coerceOptionalString(
      findQrAnswerByLinkId(qr, "928879235030"),
    ),
    defaultCredentialManagement: coerceOptionalString(
      findQrAnswerByLinkId(qr, "830887074055"),
    ),
    numberOfFailedAttemptsBeforeLockout: coerceOptionalNumber(
      findQrAnswerByLinkId(qr, "647413778355"),
    ),
    accountLockoutDurationMinutes: coerceOptionalNumber(
      findQrAnswerByLinkId(qr, "552155632772"),
    ),
    clickAllThatApply2: coerceOptionalString(
      findQrAnswerByLinkId(qr, "947716241721"),
    ),
    supportingDocumentation2: coerceOptionalString(
      findQrAnswerByLinkId(qr, "230111377333"),
    ),
    additionalNotes2: coerceOptionalString(
      findQrAnswerByLinkId(qr, "939036015644"),
    ),
  };
}

/** High-level interpreter with factories, validation, and readiness scoring. */
export class IdentificationAuthenticationVerifyIdentitiesOfUsersAndProcessesInterpreter {
  constructor(
    readonly value:
      IdentificationAuthenticationVerifyIdentitiesOfUsersAndProcesses,
  ) {}

  /** Factory: build from LHC JSON. */
  static fromLhcFormResponse(
    input: Any,
  ): IdentificationAuthenticationVerifyIdentitiesOfUsersAndProcessesInterpreter {
    return new IdentificationAuthenticationVerifyIdentitiesOfUsersAndProcessesInterpreter(
      identificationAuthenticationVerifyIdentitiesOfUsersAndProcessesLhcFormResponseAdapter(
        input,
      ),
    );
  }

  /** Factory: build from FHIR QuestionnaireResponse. */
  static fromQuestionnaireResponse(
    qr: Any,
  ): IdentificationAuthenticationVerifyIdentitiesOfUsersAndProcessesInterpreter {
    return new IdentificationAuthenticationVerifyIdentitiesOfUsersAndProcessesInterpreter(
      identificationAuthenticationVerifyIdentitiesOfUsersAndProcessesFhirQuestionnaireResponseAdapter(
        qr,
      ),
    );
  }

  /** Check required fields and report any missing or blank. */
  validateRequiredFields(): {
    ok: boolean;
    missing: Array<
      keyof IdentificationAuthenticationVerifyIdentitiesOfUsersAndProcesses
    >;
  } {
    const missing: Array<
      keyof IdentificationAuthenticationVerifyIdentitiesOfUsersAndProcesses
    > = [];
    const req: Array<
      keyof IdentificationAuthenticationVerifyIdentitiesOfUsersAndProcesses
    > = [];
    for (const k of req) {
      const v = (this.value as Any)[k];
      if (isBlank(v)) missing.push(k);
    }
    return { ok: missing.length === 0, missing };
  }

  /**
   * Assess readiness with a simple completeness score. This is meant to be
   * used to help understand how complete the types are and serves as an
   * example of how to use the generated code.
   * - requiredCovered: percentage of required fields that are non-blank
   * - overallFilled: count of non-blank fields among all known properties
   */
  assessReadiness(): {
    formTitle: string;
    requiredCovered: number; // 0..1
    totalRequired: number;
    totalFilled: number;
    totalFields: number;
    missingRequired: Array<
      keyof IdentificationAuthenticationVerifyIdentitiesOfUsersAndProcesses
    >;
  } {
    const req: Array<
      keyof IdentificationAuthenticationVerifyIdentitiesOfUsersAndProcesses
    > = [];
    const all: Array<
      keyof IdentificationAuthenticationVerifyIdentitiesOfUsersAndProcesses
    > = [
      "implementationStatus",
      "userIdentificationStandards",
      "numberOfServiceAccounts",
      "checkAllThatApply",
      "doYouHaveADeviceInventorySpreadsheet",
      "deviceIdentification",
      "workstationsLaptops",
      "servers",
      "mobileDevices",
      "networkDevices",
      "identityVerificationProcess",
      "supportingDocumentation",
      "additionalNotes",
      "implementationStatus2",
      "userAuthenticationMethods",
      "minimumLengthCharacters",
      "passwordExpirationDays",
      "passwordHistoryPasswordsRemembered",
      "clickAllThatApply",
      "multiFactorAuthentication",
      "defaultCredentialManagement",
      "numberOfFailedAttemptsBeforeLockout",
      "accountLockoutDurationMinutes",
      "clickAllThatApply2",
      "supportingDocumentation2",
      "additionalNotes2",
    ];

    let reqFilled = 0;
    const missingReq: Array<
      keyof IdentificationAuthenticationVerifyIdentitiesOfUsersAndProcesses
    > = [];
    for (const k of req) {
      const v = (this.value as Any)[k];
      if (!isBlank(v)) reqFilled++;
      else missingReq.push(k);
    }

    let totalFilled = 0;
    for (const k of all) {
      if (!isBlank((this.value as Any)[k])) totalFilled++;
    }

    return {
      formTitle:
        "Identification & Authentication (Verify identities of users and processes)",
      requiredCovered: req.length ? reqFilled / req.length : 1,
      totalRequired: req.length,
      totalFilled,
      totalFields: all.length,
      missingRequired: missingReq,
    };
  }
}
